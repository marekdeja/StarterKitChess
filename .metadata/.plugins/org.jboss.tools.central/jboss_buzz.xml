<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>July 19th DevNation Live: Container pipeline master: Continuous integration + continuous delivery with Jenkins</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VXeTjlL1GAA/" /><category term="CI/CD" /><category term="DevNation" /><category term="Events" /><category term="Red Hat OpenShift Container Platform" /><category term="containers" /><category term="Continuous Delivery" /><category term="Continuous Integration" /><category term="DevNation Live" /><category term="Jenkins" /><category term="Jenkins pipeline" /><category term="kubernetes" /><category term="Red Hat OpenShift" /><author><name>Burr Sutter</name></author><id>https://developers.redhat.com/blog/?p=507387</id><updated>2018-07-18T16:45:49Z</updated><published>2018-07-18T16:45:49Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;Jo&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;in us for the next online DevNation Live on Thursday, July 19th at 12pm EDT for &lt;/span&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;Container pipeline master: Continuous integration + continuous delivery with Jenkins&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, presented by &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat principal technical product marketing manager for &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; OpenShift&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;, &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Siamak Sadeghianfar&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In this session, we’ll take a detailed look into how you can build a super slick, automated continuous integration and continuous delivery (CI/CD) Jenkins pipeline that delivers your application payloads onto the enterprise Kubernetes platform, Red Hat OpenShift. You see how zero-downtime deployment patterns can be part of your release process when you are using a container platform based on Kubernetes.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Automating your build, test, and deployment processes can improve reliability and reduce the need for rollbacks. However, we’ll show you how rollbacks can be handled too.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;b&gt;Register now&lt;/b&gt;&lt;/a&gt;&lt;b&gt; and join the live presentation at 12pm EDT, Thursday, July 19th. &lt;/b&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Session Agenda:&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span id="more-507387"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In this session you’ll discover:&lt;/span&gt;&lt;/p&gt; &lt;ol&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;How to build a continuous integration and continuous delivery (CI/CD) pipeline using Jenkins on a container platform.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Why &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; OpenShift (the enterprise Kubernetes platform) makes it easy for even small teams to build sophisticated deployment pipelines.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;How zero downtime deployments and rollbacks can be achieved using a container platform.&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;&lt;b&gt;About the speakers&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;b&gt;&lt;i&gt;Siamak Sadeghianfar, Principle technical marketing manager, OpenShift, Red Hat&lt;/i&gt;&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;span style="font-weight: 400;"&gt;Siamak Sadeghianfar (@&lt;/span&gt;&lt;a href="https://twitter.com/siamaks"&gt;&lt;span style="font-weight: 400;"&gt;siamaks&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;) is a Red Hat principal technical product marketing manager for &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; OpenShift. Siamak strives to educate IT professionals, customers, and partners on all aspects of application development with containers, and how new technologies can be used to solve business problems quicker and with less friction. A developer at heart, he is passionate about the application development life cycle, processes, and architecture. Siamak has more than 15 years of experience in the IT industry.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://twitter.com/siamaks"&gt;&lt;span style="font-weight: 400;"&gt;https://twitter.com/siamaks&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;DevNation Live Tech Talks&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Check our &lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;developer events&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; page to find out what is happening next, such as upcoming &lt;/span&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;span style="font-weight: 400;"&gt;DevNation Live Tech Talks&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. You can view over a dozen recorded videos for previous sessions:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;July 5: Feature toggles and hypothesis-driven development&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;June 21: Advanced Microservices Tracing with Jaeger&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;June 7: Your Journey to a Serverless World—An Introduction to Serverless&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;May 16: Serverless and Servicefull Applications – Where Microservices complements Serverless&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;b&gt;Don’t forget to &lt;/b&gt;&lt;a href="https://onlinexperiences.com/Server.nxp?LASCmd=AI:4;F:APIUTILS!51004&amp;#38;PageID=2C1CF13E-08F4-43A4-B25D-0B38FE3226CF&amp;#38;AffiliateData=blog"&gt;&lt;b&gt;register now&lt;/b&gt;&lt;/a&gt;&lt;b&gt; and join the live presentation at 12pm EDT, Thursday, July 19th.&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;linkname=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fjuly-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins%2F&amp;#38;title=July%2019th%20DevNation%20Live%3A%20Container%20pipeline%20master%3A%20Continuous%20integration%20%2B%20continuous%20delivery%20with%20Jenkins" data-a2a-url="https://developers.redhat.com/blog/2018/07/18/july-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins/" data-a2a-title="July 19th DevNation Live: Container pipeline master: Continuous integration + continuous delivery with Jenkins"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/july-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins/"&gt;July 19th DevNation Live: Container pipeline master: Continuous integration + continuous delivery with Jenkins&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VXeTjlL1GAA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Join us for the next online DevNation Live on Thursday, July 19th at 12pm EDT for Container pipeline master: Continuous integration + continuous delivery with Jenkins, presented by Red Hat principal technical product marketing manager for Red Hat OpenShift, Siamak Sadeghianfar. In this session, we’ll take a detailed look into how you can build a super [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/july-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins/"&gt;July 19th DevNation Live: Container pipeline master: Continuous integration + continuous delivery with Jenkins&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/18/july-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">507387</post-id><dc:creator>Burr Sutter</dc:creator><dc:date>2018-07-18T16:45:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/18/july-19th-devnation-live-blog-and-social-container-pipeline-master-continuous-integration-continuous-delivery-with-jenkins/</feedburner:origLink></entry><entry><title>Announcing updated Red Hat Developer Studio and Container Development Kit</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kNvmRL6UM74/" /><category term="Announcement" /><category term="Container Development Kit" /><category term="Developer Tools" /><category term="Red Hat Development Suite" /><category term="Red Hat Enterprise Linux" /><category term="Red Hat JBoss Developer Studio" /><category term="CDK" /><category term="containers" /><category term="developer" /><category term="devstudio" /><category term="Fuse" /><category term="Golang" /><category term="Javascript" /><category term="Node.js" /><category term="OpenShift Container Platform" /><category term="Red Hat Application Migration Toolkit" /><category term="Red Hat OpenShift" /><category term="RHAMT" /><category term="Rust" /><author><name>Bob Davis</name></author><id>https://developers.redhat.com/blog/?p=506577</id><updated>2018-07-18T16:14:21Z</updated><published>2018-07-18T16:14:21Z</published><content type="html">&lt;p&gt;I’m extremely pleased to announce the release of &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit (CDK) 3.5&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;Red Hat Developer Studio 12&lt;/a&gt;. Whether you are developing traditional or cloud-based applications and microservices, you can run these tools on your Windows, macOS, or Red Hat Enterprise Linux laptop to streamline development:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Container Development Kit provides a pre-built container development environment to help you develop container-based applications quickly using Red Hat OpenShift and Kubernetes.&lt;/li&gt; &lt;li&gt;Red Hat Developer Studio (previously named JBoss Developer Studio) provides a desktop IDE with superior support for your entire development lifecycle. It includes a broad set of tooling capabilities and support for multiple programming models and frameworks. Developer Studio provides broad support for working with Red Hat products and technologies including middleware, business automation, and integration, notably Camel and Red Hat Fuse. Developer Studio is based on Eclipse 4.8 (Photon).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A number of Red Hat Enterprise Linux (RHEL) development tools have been updated. These include Rust 1.26.1, Go 1.10.2, Cargo 1.26, and Eclipse 4.8 (Photon).&lt;/p&gt; &lt;p&gt;Our goals are to improve usability of our tools for developers, while adding new features that matter most for users of Red Hat platforms and technologies.&lt;/p&gt; &lt;p&gt;Overview of new features:&lt;/p&gt; &lt;p&gt;&lt;span id="more-506577"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Release highlights&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;&lt;b&gt;CDK 3.5&lt;/b&gt;&lt;/a&gt; has been updated to include the following updates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The latest Red Hat OpenShift Container Platform is included, and it can be updated to newly released versions as they become available by using the &lt;code&gt;minishift start --ocp-tag &amp;#60;version&amp;#62;&lt;/code&gt; command.&lt;/li&gt; &lt;li&gt;You can &lt;a href="https://docs.openshift.org/latest/minishift/using/run-against-an-existing-machine.html"&gt;run the CDK against an existing RHEL 7 remote machine&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;SSHFS is the default method for sharing folders on your host machine with the container environment running inside of the VM.&lt;/li&gt; &lt;li&gt;A &lt;a href="https://docs.openshift.org/latest/minishift/using/experimental-features.html#local-dns-server"&gt;local DNS server&lt;/a&gt; is included to reduce dependency on nip.io and to more fully enable disconnected work.&lt;/li&gt; &lt;li&gt;CDK 3.5 is based on Minishift 1.21.0.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;&lt;b&gt;Red Hat Developer Studio&lt;/b&gt;&lt;/a&gt;&lt;b&gt; 12&lt;/b&gt; has been updated to the latest &lt;a href="https://www.eclipse.org/eclipse/news/4.8/"&gt;Eclipse Photon&lt;/a&gt; release. It supports the CDK 3.5 server adapter and the Red Hat OpenShift.io login provider. This release supports developing apps in Java 9 and 10. As always, it runs on Linux, as well as Windows and macOS.&lt;/p&gt; &lt;p&gt;Additionally, Red Hat Developer Studio Central Plugins have been updated to include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Fuse Tooling 11&lt;/li&gt; &lt;li&gt;Red Hat Application Migration Toolkit 4.1&lt;/li&gt; &lt;li&gt;CDK 3.5 server adapter&lt;/li&gt; &lt;li&gt;WildFly 13 support&lt;/li&gt; &lt;li&gt;OpenShift SpringBoot-enhanced support&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JBIDE-26065"&gt;Connector&lt;/a&gt; for &lt;a href="http://www.nodeclipse.org/updates/"&gt;Nodeclipse&lt;/a&gt; to support Node.js&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See Jeff Maury&amp;#8217;s article &lt;a href="http://announcing-devstudio-12-jboss-tools-46"&gt;&lt;em&gt;Announcing Red Hat Developer Studio 12 and JBoss Tools 4.6&lt;/em&gt;&lt;/a&gt; on the Red Hat Developer blog. Plugin information is available in the &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.Final.html"&gt;JBoss Tools documentation&lt;/a&gt;. Eclipse Photon information is available at &lt;a href="https://jaxenter.com/eclipse-photon-is-out-146242.html"&gt;JAXenter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Updates to Red Hat Enterprise Linux tools&lt;/h2&gt; &lt;p&gt;The Go language packages in Go Toolset have been updated from version 1.8.7 to 1.10.2. This release fixes some recently discovered security issues. Notable changes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The results of builds and test runs are now cached, improving the performance of these actions.&lt;/li&gt; &lt;li&gt;Concurrent compilation of functions in packages has been added.&lt;/li&gt; &lt;li&gt;Type aliases have been added to the Go programming language. To create a type alias, use this format: &lt;code&gt;type B = A&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The math/bits package for bit counting and manipulation of unsigned integer types has been added to the Go standard library.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;sync.Map&lt;/code&gt; type for concurrent access has been added.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;testing.B.helper()&lt;/code&gt; and &lt;code&gt;testing.T.helper()&lt;/code&gt; functions have been added to enable marking of test helper functions.&lt;/li&gt; &lt;li&gt;The time tracked by the &lt;code&gt;Time&lt;/code&gt; type from the &lt;code&gt;time&lt;/code&gt; package is now transparently always monotonic.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Rust has been updated from version 1.25.0 to 1.26.2. Notable changes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The ability has been added to describe a type with the &lt;code&gt;impl Trait&lt;/code&gt; construct without giving the type name. This construct is useful for returning unnamed types in situations where the actual type is not known, such as with closures, or where the type’s implementation should stay private. Situations where a type must be supplied in multiple positions in a statement still require type parameters.&lt;/li&gt; &lt;li&gt;Support for automatic pattern references has been added to the &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and other statements. When using patterns to match the inner parts of a referenced object, the compiler can now automatically dereference the object and reference the inner parts.&lt;/li&gt; &lt;li&gt;Previously, the &lt;code&gt;main()&lt;/code&gt; function of a Rust program could return only the &lt;code&gt;()&lt;/code&gt; unit type. Rust has been extended to allow returning a value of the &lt;code&gt;Result&lt;/code&gt; type from &lt;code&gt;main()&lt;/code&gt;, such as &lt;code&gt;Result&amp;#60;(), E&amp;#62;&lt;/code&gt;, and to handle the error values supplied this way.&lt;/li&gt; &lt;li&gt;Inclusive ranges have been added. To specify a range that includes the last specified value, use &lt;code&gt;a..=b&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Support for slice patterns has been added to the &lt;code&gt;match&lt;/code&gt; statement.&lt;/li&gt; &lt;li&gt;128-bit integer types i128 and u128 have been added.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Additional Red Hat Enterprise Linux tool updates include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;cargo&lt;/code&gt; tool has been updated from version 0.26.0 to 1.26.0.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;cargo-vendor&lt;/code&gt; tool has been updated from version 0.1.13 to 0.1.15.&lt;/li&gt; &lt;li&gt;Rust Language Server (RLS) version 0.126.0 has been added to Red Hat Developer Tools. This tool enables integration of Rust with integrated development environments. RLS is provided by the &lt;code&gt;rust-toolset-7-rls-preview&lt;/code&gt; package.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;More information on these tools and others is available &lt;a href="https://developers.redhat.com/products/clang-llvm-go-rust/overview/"&gt;in our documentation.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As always, I encourage you to download and try out these new tools, tell your friends, and supply us with any feedback you have. Many thanks to the extended Red Hat Developer Tools and Program teams who, once again, delivered an on-time release on our 12-week cadence.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;linkname=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-updated-cdk-devstudio%2F&amp;#38;title=Announcing%20updated%20Red%20Hat%20Developer%20Studio%20and%20Container%20Development%20Kit" data-a2a-url="https://developers.redhat.com/blog/2018/07/18/announcing-updated-cdk-devstudio/" data-a2a-title="Announcing updated Red Hat Developer Studio and Container Development Kit"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/announcing-updated-cdk-devstudio/"&gt;Announcing updated Red Hat Developer Studio and Container Development Kit&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kNvmRL6UM74" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I’m extremely pleased to announce the release of Red Hat Container Development Kit (CDK) 3.5 and Red Hat Developer Studio 12. Whether you are developing traditional or cloud-based applications and microservices, you can run these tools on your Windows, macOS, or Red Hat Enterprise Linux laptop to streamline development: Red Hat Container Development Kit provides [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/announcing-updated-cdk-devstudio/"&gt;Announcing updated Red Hat Developer Studio and Container Development Kit&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/18/announcing-updated-cdk-devstudio/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">506577</post-id><dc:creator>Bob Davis</dc:creator><dc:date>2018-07-18T16:14:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/18/announcing-updated-cdk-devstudio/</feedburner:origLink></entry><entry><title>Announcing Red Hat Developer Studio 12.0.0.GA and JBoss Tools 4.6.0.Final for Eclipse Photon</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OOzbEZGP8Uo/" /><category term="Announcement" /><category term="Community" /><category term="Developer Tools" /><category term="Java" /><category term="Red Hat JBoss Developer Studio" /><category term="camel" /><category term="containers" /><category term="Developer Studio" /><category term="Eclipse" /><category term="Eclipse Desktop" /><category term="Fuse Tooling" /><category term="java 10" /><category term="Java 8" /><category term="Java 9" /><category term="Java EE" /><category term="JavaEE" /><category term="JavaEE7" /><category term="microservices" /><category term="OpenShift Container Platform" /><category term="Red Hat Fuse" /><category term="Red Hat JBoss Enterprise Application Platform" /><category term="Red Hat OpenShift" /><category term="Red Hat OpenShift Container Platform" /><author><name>Jeff Maury</name></author><id>https://developers.redhat.com/blog/?p=508337</id><updated>2018-07-18T16:02:23Z</updated><published>2018-07-18T16:02:23Z</published><content type="html">&lt;p&gt;Attention desktop IDE users: &lt;a href="https://developers.redhat.com/products/devstudio/download/"&gt;Red Hat Developer Studio 12.0&lt;/a&gt; and the community edition, &lt;a href="http://tools.jboss.org/downloads/jbosstools/photon/4.6.0.Final.html"&gt;JBoss Tools 4.6.0&lt;/a&gt; for Eclipse Photon, are now available. You can download a bundled installer, Developer Studio, which installs Eclipse 4.8 with all of the JBoss Tools already configured. Or, if you have an existing Eclipse 4.8 (Photon) installation, you can download the JBoss Tools package. This article highlights some of the new features in both JBoss Tools and Eclipse Photon, covering WildFly, Spring Boot, Camel, Maven, and many Java related improvements including full Java 10 support.&lt;/p&gt; &lt;p&gt;Developer Studio / JBoss Tools provides a desktop IDE with a broad set of tooling covering multiple programming models and frameworks. If you are doing container / cloud development, there is integrated functionality for working with Red Hat OpenShift, Kubernetes, Red Hat Container Development Kit, and Red Hat OpenShift Application Runtimes. For integration projects, there is tooling covering Camel and Red Hat Fuse that can be used in both local and cloud deployments.&lt;span id="more-508337"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 id="installation"&gt;Installation&lt;/h2&gt; &lt;h3&gt;Red Hat Developer Studio &amp;#8211; Full install&lt;/h3&gt; &lt;p&gt;Download &lt;a href="https://www.jboss.org/products/devstudio.html"&gt;Red Hat Developer Studio Installer &lt;/a&gt;. The download is a single executable JAR file.  You will need to have a JDK installed. Then, run it like this:&lt;/p&gt; &lt;pre&gt;java -jar jboss-devstudio-&amp;#60;installername&amp;#62;.jar&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Adding JBoss Tools to your existing Eclipse 4.8 environment&lt;/h3&gt; &lt;p&gt;JBoss Tools also know as the Bring-Your-Own-Eclipse (BYOE) option requires at least Eclipse 4.8 (Photon) but we recommend using the latest &lt;a href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/photonr"&gt;Eclipse 4.8 Photon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us in the &lt;em&gt;Eclipse Marketplace&lt;/em&gt; under &lt;em&gt;JBoss Tools&lt;/em&gt; or &lt;em&gt;Red Hat Developer Studio&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Alternatively, for JBoss Tools, you can also use our update site directly:&lt;/p&gt; &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h2 id="what-is-new"&gt;What is new?&lt;/h2&gt; &lt;p&gt;Our main focus for this release was on adoption of Java 10, improvements for container based development and bug fixing. Eclipse Photon itself has &lt;a href="https://www.youtube.com/watch?v=gDAb_iyO5Fc&amp;#38;list=PLy7t4z5SYNaQjVGIS9YUfZzFQpNFYpCny"&gt;a lot of new cool stuff&lt;/a&gt; but let me highlight just a few updates in both Eclipse Photon and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt; &lt;h3 id="openshift-3"&gt;OpenShift 3&lt;/h3&gt; &lt;h4 id="enhanced-spring-boot-support-for-server-adapter"&gt;Enhanced Spring Boot support for server adapter&lt;/h4&gt; &lt;p&gt;The Spring Boot runtime was already supported by the OpenShift server adapter. However, it had one major limitation: files and resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies was not handled. Fortunately, this new release solves that!&lt;/p&gt; &lt;h3 id="server-tools"&gt;Server tools&lt;/h3&gt; &lt;h4 id="wildfly-13-server-adapter"&gt;Wildfly 13 Server Adapter&lt;/h4&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 13. It adds support for Servlet 4.0.&lt;/p&gt; &lt;h3 id="fuse-tooling"&gt;Camel and Fuse Tooling&lt;/h3&gt; &lt;h4 id="camel-rest-dsl-from-wsdl-wizard"&gt;Camel Rest DSL from WSDL wizard&lt;/h4&gt; &lt;p&gt;There is a new &lt;em&gt;&amp;#8220;Camel Rest DSL from WSDL&amp;#8221;&lt;/em&gt; wizard. This wizard wraps the &lt;a href="https://github.com/jboss-fuse/wsdl2rest"&gt;wsdl2rest tool&lt;/a&gt; now included with the Fuse 7 distribution, which takes a WSDL file for a SOAP-based (JAX-WS) web service and generates a combination of CXF-generated code and a Camel REST DSL route to make it accessible using REST operations.&lt;/p&gt; &lt;p&gt;To start, you need an existing Fuse Integration project in your workspace and access to the WSDL for the SOAP service. Then use&lt;em&gt;File→New→Other…​&lt;/em&gt; and select &lt;em&gt;Red Hat Fuse→Camel Rest DSL from WSDL&lt;/em&gt; wizard.&lt;/p&gt; &lt;p&gt;On the first page of the wizard, select your WSDL and the Fuse Integration project in which to generate the Java code and Camel configuration.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-508367 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-one.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-one.jpg" alt="" width="515" height="497" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-one.jpg 515w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-one-300x290.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-one-32x32.jpg 32w" sizes="(max-width: 515px) 100vw, 515px" /&gt;&lt;/p&gt; &lt;p&gt;On the second page, you can customize the Java folder path for your generated classes, the folder for the generated Camel file, plus any customization for the SOAP service address and destination REST service address.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-508377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-two.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-two.jpg" alt="" width="515" height="497" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-two.jpg 515w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-two-300x290.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/wsdl2rest-wizard-page-two-32x32.jpg 32w" sizes="(max-width: 515px) 100vw, 515px" /&gt;&lt;/p&gt; &lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the new Camel configuration and associated Java code are generated in your project. The wizard determines whether your project is Blueprint, Spring, or Spring Boot based, and it creates the corresponding artifacts without requiring any additional input. When the wizard is finished, you can open your new Camel file in the Fuse Tooling Route Editor to view what it created.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-508387 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties-1024x555.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties.jpg" alt="" width="1920" height="1040" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties.jpg 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties-300x163.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties-768x416.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-no-properties-1024x555.jpg 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/p&gt; &lt;p&gt;That brings us to another new functionality, the REST tab in the Fuse Tooling Route Editor.&lt;/p&gt; &lt;h4 id="camel-editor-rest-tab"&gt;Camel Editor REST tab&lt;/h4&gt; &lt;p&gt;The Fuse Tooling Route Editor provides a new &lt;em&gt;REST&lt;/em&gt; tab. For this release, the contents of this tab is read-only and includes the following information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Details for the REST Configuration element including the component (jetty, netty, servlet, etc.), the context path, the port, binding mode (JSON, XML, etc.), and host. There is only one REST Configuration element.&lt;/li&gt; &lt;li&gt;A list of REST elements that collect REST operations. A configuration can have more than one REST element. Each REST element has an associated property page that displays additional details such as the path and the data it consumes or produces.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-508397 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties-1024x555.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties.jpg" alt="" width="1920" height="1040" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties.jpg 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties-300x163.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties-768x416.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-element-properties-1024x555.jpg 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A list of REST operations for the selected REST element. Each of the operations has an associated property page that provides details such as the URI and output type.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter size-full wp-image-508407 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties-1024x555.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties.jpg" alt="" width="1920" height="1040" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties.jpg 1920w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties-300x163.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties-768x416.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/fuse-editor-rest-tab-rest-operation-properties-1024x555.jpg 1024w" sizes="(max-width: 1920px) 100vw, 1920px" /&gt;&lt;/p&gt; &lt;p&gt;For this release, the REST tab is read-only. If you want to edit the REST DSL, use the Route Editor Source tab. When you make changes and save them in the Source tab, the REST tab refreshes to show your updates.&lt;/p&gt; &lt;h4 id="camel-uri-completion-with-xml-dsl"&gt;Camel URI completion with XML DSL&lt;/h4&gt; &lt;p&gt;As announced &lt;a href="https://developers.redhat.com/blog/2018/01/31/apache-camel-uri-completion-eclipse-xml-editor/"&gt;here&lt;/a&gt;, it was already possible to have Camel URI completion with XML DSL in the source tab of the Camel Route editor by installing the &lt;a href="https://github.com/camel-tooling/camel-lsp-client-eclipse"&gt;Language Support for Apache Camel&lt;/a&gt; in your IDE.&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This feature is now installed by default with Fuse Tooling!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt;&lt;img class=" aligncenter size-full wp-image-508417 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/completionSourceEditor-1024x569.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/completionSourceEditor.gif" alt="" width="1200" height="667" /&gt;&lt;/div&gt; &lt;div&gt; &lt;h3 id="maven"&gt;Maven&lt;/h3&gt; &lt;h4 id="maven-support-updated-to-m2e-1-9-1"&gt;Maven support updated to M2E 1.9.1&lt;/h4&gt; &lt;p&gt;The Maven support is based on Eclipse M2E 1.9.1, bringing the following features:&lt;/p&gt; &lt;h5 id="advanced-classpath-isolation"&gt;Advanced classpath isolation&lt;/h5&gt; &lt;p&gt;Thanks to Eclipse Photon, there are new two different classpathes, the main and the test classpath. The main classes will now no longer see the test classes and dependencies&lt;/p&gt; &lt;h5 id="embedded-maven-runtime"&gt;Embedded Maven runtime&lt;/h5&gt; &lt;p&gt;The embedded Maven runtime is now based on Apache Maven 3.5.3.&lt;/p&gt; &lt;h5 id="archetype-catalog-management"&gt;Archetype catalog management&lt;/h5&gt; &lt;p&gt;It is now possible to disable an archetype catalog.&lt;/p&gt; &lt;h5 id="java-9-10-support"&gt;Java 9/10 support&lt;/h5&gt; &lt;p&gt;Support for Java 9/10 has been improved: bugs fixes, better handling of module path.&lt;/p&gt; &lt;h3 id="java-developement-tools-jdt"&gt;Java Developement Tools (JDT)&lt;/h3&gt; &lt;h4 id="support-for-java-10"&gt;Support for Java&lt;img src="https://s.w.org/images/core/emoji/2.4/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; 10&lt;/h4&gt; &lt;h5 id="quick-fix-to-change-project-compliance-and-jre-to-10"&gt;Quick fix feature to change project compliance and JRE to 10&lt;/h5&gt; &lt;p&gt;A quick fix &lt;strong&gt;Change project compliance and JRE to 10&lt;/strong&gt; is provided to quickly change the current project to be compatible with Java 10.&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter" src="https://www.eclipse.org/eclipse/news/4.8/images/quickfix-change-compliance-10.png" alt="quickfix change compliance 10" /&gt;&lt;/p&gt; &lt;h4 id="java-editor"&gt;Java Editor&lt;/h4&gt; &lt;h5 id="quick-fix-to-add-nonnullbydefault-to-packages"&gt;Quick Fix feature to add @NonNullByDefault to packages&lt;/h5&gt; &lt;p&gt;A new quick fix is offered to fix issues that are reported when the Missing &amp;#8216;@NonNullByDefault&amp;#8217; annotation on package warning is enabled. If the package already has a &lt;code&gt;package-info.java&lt;/code&gt;, the quick fix can be invoked from the editor:&lt;/p&gt; &lt;p id="DYEYiko"&gt;&lt;img class=" aligncenter size-full wp-image-508437 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da90adb0d5.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da90adb0d5.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da90adb0d5.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da90adb0d5-300x54.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Otherwise, the quick fix must be invoked from the problems view, and will create a &lt;code&gt;package-info.java&lt;/code&gt; with the required annotation:&lt;/p&gt; &lt;p id="kFRefTH"&gt;&lt;img class=" aligncenter size-full wp-image-508447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da95232dce.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da95232dce.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da95232dce.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da95232dce-300x164.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;When invoked from the problems view, both variations of the quick fix can fix the problem for multiple packages simultaneously.&lt;/p&gt; &lt;h5 id="navigate-to-switch-statement"&gt;Navigate to &amp;#8216;switch&amp;#8217; statement&lt;/h5&gt; &lt;p&gt;You can now &lt;strong&gt;Ctrl+click&lt;/strong&gt; or use &lt;strong&gt;Open Declaration (F3)&lt;/strong&gt; on case or default keywords to quickly navigate to the beginning of the switch statement.&lt;/p&gt; &lt;p id="sVPKByn"&gt;&lt;img class=" aligncenter size-full wp-image-508457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da987993eb.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da987993eb.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da987993eb.png 380w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da987993eb-300x69.png 300w" sizes="(max-width: 380px) 100vw, 380px" /&gt;&lt;/p&gt; &lt;h5 id="escape-non-ascii-characters-when-pasting-into-a-string-literal"&gt;Escape non-ASCII characters when pasting into a string literal&lt;/h5&gt; &lt;p&gt;The &lt;strong&gt;Java &amp;#62; Editor &amp;#62; Typing &amp;#62; Escape text when pasting into a string literal&lt;/strong&gt; preference option now has a suboption &lt;strong&gt;Use Unicode escape syntax for non-ASCII characters&lt;/strong&gt;:&lt;/p&gt; &lt;p id="kawnIyn"&gt;&lt;img class=" aligncenter size-full wp-image-508467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9b22627f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9b22627f.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9b22627f.png 342w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9b22627f-300x112.png 300w" sizes="(max-width: 342px) 100vw, 342px" /&gt;&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When enabled, characters outside the visible ASCII range will be replaced by unicode escape sequences when pasted into a string:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content" style="text-align: left;"&gt; &lt;p id="HmAeaAe"&gt;&lt;img class=" aligncenter size-full wp-image-508477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9cfea417.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9cfea417.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9cfea417.png 452w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9cfea417-300x47.png 300w" sizes="(max-width: 452px) 100vw, 452px" /&gt;&lt;/p&gt; &lt;h5 id="improved-java-syntax-coloring-in-the-dark-theme"&gt;Improved Java syntax coloring in the dark theme&lt;/h5&gt; &lt;p&gt;To improve readability in the dark theme, bold style usage has been reduced and some colors that were too close to each other have been altered.&lt;/p&gt; &lt;p id="hXREhvn"&gt;&lt;img class=" aligncenter size-full wp-image-508487 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9f8530fb.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9f8530fb.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9f8530fb.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4da9f8530fb-300x179.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h5 id="improved-coloring-of-links-in-code-element-information-in-the-dark-theme"&gt;Improved coloring of links in code element information in the dark theme&lt;/h5&gt; &lt;p&gt;The colors of links in code element information control now takes the color settings of the &lt;strong&gt;Hyperlink text color&lt;/strong&gt; and the &lt;strong&gt;Active hyperlink text color&lt;/strong&gt; from the &lt;strong&gt;Colors &amp;#38; Fonts&lt;/strong&gt; preference page into account. The readability in the dark theme has been improved a lot by this.&lt;/p&gt; &lt;p&gt;Before:&lt;/p&gt; &lt;p id="XnGaNJX"&gt;&lt;img class=" aligncenter size-full wp-image-508497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa55725b6.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa55725b6.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa55725b6.png 509w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa55725b6-300x107.png 300w" sizes="(max-width: 509px) 100vw, 509px" /&gt;&lt;/p&gt; &lt;p&gt;After:&lt;/p&gt; &lt;p id="MOgepub"&gt;&lt;img class=" aligncenter size-full wp-image-508507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa74a9712.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa74a9712.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa74a9712.png 509w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daa74a9712-300x107.png 300w" sizes="(max-width: 509px) 100vw, 509px" /&gt;&lt;/p&gt; &lt;h5 id="improved-coloring-of-inherited-members-in-the-quick-outline-in-the-dark-theme"&gt;Improved coloring of inherited members in the Quick Outline in the dark theme&lt;/h5&gt; &lt;p&gt;The Eclipse default dark theme now includes styling of inherited members in JDT’s &lt;strong&gt;Quick Outline&lt;/strong&gt;. This improves readability in the dark theme a lot. The color can be configured via the &lt;strong&gt;Java &amp;#62; Inherited Members&lt;/strong&gt; color definition on the &lt;strong&gt;Colors and Fonts&lt;/strong&gt; preference page.&lt;/p&gt; &lt;p&gt;Before:&lt;/p&gt; &lt;p id="gkRKpsm"&gt;&lt;img class=" aligncenter size-full wp-image-508517 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaa6d49c3.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaa6d49c3.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaa6d49c3.png 500w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaa6d49c3-300x259.png 300w" sizes="(max-width: 500px) 100vw, 500px" /&gt;&lt;/p&gt; &lt;p&gt;After:&lt;/p&gt; &lt;p id="nmeKhIQ"&gt;&lt;img class=" aligncenter size-full wp-image-508527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daac4c0014.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daac4c0014.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daac4c0014.png 500w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daac4c0014-300x261.png 300w" sizes="(max-width: 500px) 100vw, 500px" /&gt;&lt;/p&gt; &lt;h4 id="java-views-and-dialogs"&gt;Java Views and Dialogs&lt;/h4&gt; &lt;h5 id="test-sources"&gt;Test sources&lt;/h5&gt; &lt;p&gt;In the &lt;strong&gt;Java Build Path&lt;/strong&gt; project settings, there is now an attribute &lt;strong&gt;Contains test sources&lt;/strong&gt; to configure that a source folder contains test sources. (Note: test sources must have their own output folder). Similarly, for projects and libraries there is an attribute &lt;strong&gt;Visible only for test sources&lt;/strong&gt;. This setting also exists for classpath containers, and if it is set to &lt;strong&gt;Yes&lt;/strong&gt; for one of these, this value will be used for all contained libraries and projects.&lt;/p&gt; &lt;p id="sinYSBw"&gt;&lt;img class=" aligncenter size-full wp-image-508537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaf2489b6.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaf2489b6.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaf2489b6.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daaf2489b6-300x279.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Test source folders and dependencies are shown with a darker icon in the build path settings, the package explorer and other locations. This can be disabled in &lt;strong&gt;Preferences &amp;#62; Java &amp;#62; Appearance&lt;/strong&gt;:&lt;/p&gt; &lt;p id="ImoTfGq"&gt;&lt;img class=" aligncenter size-full wp-image-508547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab138b77a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab138b77a.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab138b77a.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab138b77a-300x147.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Referenced projects can contain test sources and have test dependencies themselves. Usually, when test sources are compiled, the test code in projects on the build path will be visible. As this is not always desirable, it can be changed by setting the new build path attribute &lt;strong&gt;Without test code&lt;/strong&gt;, that is available for projects, to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt; &lt;p id="ydJxShS"&gt;&lt;img class=" aligncenter size-full wp-image-508557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab31b202e.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab31b202e.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab31b202e.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab31b202e-300x177.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Build path entries configured like this have a decoration [without test code] after the project name, which can be disabled in &lt;strong&gt;Preferences &amp;#62; General &amp;#62; Appearance &amp;#62; Label Decorations&lt;/strong&gt;:&lt;/p&gt; &lt;p id="EwarZPx"&gt;&lt;img class=" aligncenter size-full wp-image-508567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab4bc4fc6.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab4bc4fc6.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab4bc4fc6.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab4bc4fc6-300x166.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;For each project, compilation is now done in two phases: First all main sources (which cannot see any test-code on the build-path) and then all test sources.&lt;/p&gt; &lt;p id="YZLXHGr"&gt;&lt;img class=" aligncenter size-full wp-image-508577 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-300x298.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-32x32.png 32w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-50x50.png 50w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-64x64.png 64w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-96x96.png 96w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dab748e0b9-128x128.png 128w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;As a consequence, if the project is a modular Java 9 project, test dependencies like JUnit can not be referenced in the &lt;code&gt;module-info.java&lt;/code&gt;, as they will not be visible while compiling it. The solution used to handle this is the same, that Maven uses: When test dependencies are put on the classpath, the module being compiled will automatically be configured to read the unnamed module during the compilation of the test sources, so the test dependencies will be visible.&lt;/p&gt; &lt;p&gt;Of course, code completion will not suggest test code in main sources:&lt;/p&gt; &lt;p id="bWMjwfB"&gt;&lt;img class=" aligncenter size-full wp-image-508587 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daba0a5cd7.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daba0a5cd7.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daba0a5cd7.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daba0a5cd7-300x126.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;There are now two dynamic Java working sets &lt;strong&gt;Java Main Sources&lt;/strong&gt; and &lt;strong&gt;Java Test Sources&lt;/strong&gt; containing the source folders grouped according to value of the &lt;strong&gt;Contains test sources&lt;/strong&gt; attribute. This can for example be used to remove warnings in test sources from the problems view:&lt;/p&gt; &lt;p id="JXRsUtP"&gt;&lt;img class=" aligncenter size-full wp-image-508597 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabc53ccb4.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabc53ccb4.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabc53ccb4.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabc53ccb4-300x238.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;To achieve this, create a new filter that shows warnings for the &lt;strong&gt;Java Main Sources&lt;/strong&gt; working set and select it with the &lt;strong&gt;All Errors on Workspace&lt;/strong&gt; filter:&lt;/p&gt; &lt;p id="gtsiELE"&gt;&lt;img class=" aligncenter size-full wp-image-508607 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabeb5d9e5.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabeb5d9e5.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabeb5d9e5.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dabeb5d9e5-300x192.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;There are also dedicated filters to quickly remove hits in main code or test code from Java search results:&lt;/p&gt; &lt;p id="SksdCpQ"&gt;&lt;img class=" aligncenter size-full wp-image-508617 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac0ceec16.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac0ceec16.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac0ceec16.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac0ceec16-300x222.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Similar, there is a filter to remove test code from &lt;strong&gt;Call hierarchies&lt;/strong&gt;:&lt;/p&gt; &lt;p id="KgKSDRD"&gt;&lt;img class=" aligncenter size-full wp-image-508627 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac27bae95.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac27bae95.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac27bae95.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac27bae95-300x198.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Another filter to remove test code exists for &lt;strong&gt;Quick type hierarchies&lt;/strong&gt;:&lt;/p&gt; &lt;p id="zLGgPOd"&gt;&lt;img class=" aligncenter size-full wp-image-508637 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac4aee7a5.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac4aee7a5.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac4aee7a5.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac4aee7a5-300x141.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Test source folders will be preselected in the &lt;strong&gt;New JUnit Test Case&lt;/strong&gt; wizard&lt;/p&gt; &lt;p id="DTyAWYH"&gt;&lt;img class=" aligncenter size-full wp-image-508647 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac6b74a80.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac6b74a80.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac6b74a80.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac6b74a80-300x216.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;In Run and Debug configurations, the &lt;strong&gt;Classpath&lt;/strong&gt; tab (or &lt;strong&gt;Dependencies&lt;/strong&gt; tab when launching with Java 9) contains a new option &lt;strong&gt;Exclude Test Code&lt;/strong&gt;, that is automatically preselected when launching a Java Application from a source folder that is not marked to contain test sources:&lt;/p&gt; &lt;p id="lQSLLpb"&gt;&lt;img class=" aligncenter size-full wp-image-508657 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac8722baa.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac8722baa.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac8722baa.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dac8722baa-300x277.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;When launching with Java 9 and this option is not selected, command line options will automatically be added so modules that have a non-empty classpath read the unnamed module. These command line options are part of what can be overridden using the new &lt;strong&gt;Override Dependencies&lt;/strong&gt; button.&lt;/p&gt; &lt;h5 id="sort-library-entries-alphabetically-in-package-explorer"&gt;Sort library entries alphabetically in Package Explorer&lt;/h5&gt; &lt;p&gt;The content of libraries are displayed in the order of the classpath. This makes it difficult to find specific libraries by their name, especially when projects have many dependencies. The library entries can now be sorted alphabetically when setting the preference &lt;strong&gt;Sort library entries alphabetically in Package Explorer&lt;/strong&gt; on the &lt;strong&gt;Java &amp;#62; Appearance&lt;/strong&gt; preference page:&lt;/p&gt; &lt;p id="oPUQHsz"&gt;&lt;img class=" aligncenter size-full wp-image-508667 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacc3981b4.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacc3981b4.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacc3981b4.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacc3981b4-300x170.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p id="uCwhmKz"&gt;&lt;img class=" aligncenter size-full wp-image-508677 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacd6cf1fa.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacd6cf1fa.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacd6cf1fa.png 450w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dacd6cf1fa-300x162.png 300w" sizes="(max-width: 450px) 100vw, 450px" /&gt;&lt;/p&gt; &lt;p&gt;The default for this preference is &lt;strong&gt;OFF&lt;/strong&gt;.&lt;/p&gt; &lt;h5 id="generate-dialogs-use-verbs-instead-of-ok"&gt;Generate dialogs use verbs instead of OK&lt;/h5&gt; &lt;p&gt;The &lt;strong&gt;Generate…​&lt;/strong&gt; dialogs of the Java tools have been adapted to use verbs instead of OK.&lt;/p&gt; &lt;h4 id="java-compiler"&gt;Java Compiler&lt;/h4&gt; &lt;h5 id="option-for-regex-in-module-declaration-search"&gt;Option for Regex in Module Declaration Search&lt;/h5&gt; &lt;p&gt;This is an &lt;strong&gt;experimental&lt;/strong&gt; support provided to allow the regular expression usage in search field while searching for module declaration. This can be considered as a wrapper of the API change.&lt;/p&gt; &lt;p&gt;To invoke the regular expression search from the search field under &lt;strong&gt;Java Search&lt;/strong&gt;, start the expression with &amp;#8220;/r &amp;#8221; i.e, a slash &amp;#8216;/&amp;#8217;, the letter &amp;#8216;r&amp;#8217; and a blank &amp;#8216; &amp;#8216; (not tab) followed by a regex, an example of which is shown below:&lt;/p&gt; &lt;p id="HNDLfpQ"&gt;&lt;img class=" aligncenter size-full wp-image-508687 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dad2a66207.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dad2a66207.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dad2a66207.png 452w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dad2a66207-149x300.png 149w" sizes="(max-width: 452px) 100vw, 452px" /&gt;&lt;/p&gt; &lt;p&gt;In the above example, all the characters trailing &amp;#8220;/r &amp;#8221; form a Java regular expression to denote a module name which starts with zero or more &amp;#8216;n’s followed by the string &amp;#8220;.ver&amp;#8221; and followed again by zero or more number of arbitrary characters.&lt;/p&gt; &lt;p&gt;Another example would be to search for all modules that start with &lt;code&gt;java.x&lt;/code&gt; followed by zero or more characters which is given by the regular expression &lt;code&gt;/r java\.x.*&lt;/code&gt; &amp;#8211; note the backslash for . to consider this as a &amp;#8220;normal&amp;#8221; character instead of the special regex].&lt;/p&gt; &lt;p&gt;Yet another example would be search for all module names that start with j followed by zero or more characters and ending with .xml which in regex language translates to &lt;code&gt;/r j.*\.xml&lt;/code&gt;. Please note that here the first &amp;#8216;.&amp;#8217; is the special regex character while the second &amp;#8216;.&amp;#8217; is escaped to denote that this is a normal character.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should use this only for &lt;strong&gt;Declarations&lt;/strong&gt; search for modules as it is not implemented for module references. Selecting &lt;strong&gt;All occurrences&lt;/strong&gt; in conjunction with regex will default to finding only the &lt;strong&gt;Declarations&lt;/strong&gt; matching the regex ignoring the references.&lt;/p&gt; &lt;h4 id="nonnullbydefault-per-module"&gt;@NonNullByDefault per module&lt;/h4&gt; &lt;p&gt;If a module is annotated with &lt;code&gt;@NonNullByDefault&lt;/code&gt;, the compiler will interpret this as the global default for all types in this module:&lt;/p&gt; &lt;pre class="prettyprint highlight prettyprinted"&gt;&lt;code class="language-java"&gt;&lt;span class="lit"&gt;@org&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;eclipse&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;jdt&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;annotation&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="typ"&gt;NonNullByDefault&lt;/span&gt;&lt;span class="pln"&gt; module my&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;nullsafe&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;mod &lt;/span&gt;&lt;span class="pun"&gt;{&lt;/span&gt; &lt;span class="pun"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p style="text-align: left;"&gt;Note, however, that this requires an annotation type declared either with target &lt;code&gt;ElementType.MODULE&lt;/code&gt;, or with no explicit target at all. Versions 2.2.0 and greater of bundle &lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt; use the latter strategy and hence support a module-wide non-null default.&lt;/p&gt; &lt;h5 id="nonnullbydefault-improvements"&gt;@NonNullByDefault improvements&lt;/h5&gt; &lt;p&gt;When using annotation-based null analysis, there are now more ways to define which unannotated locations are implicitly assumed to be annotated as &lt;code&gt;@NonNull&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt; annotations based on enum &lt;code&gt;DefaultLocation&lt;/code&gt; can also be used if the primary nullness annotations are declaration annotations (previously this was supported only for &lt;code&gt;TYPE_USE&lt;/code&gt; annotations).&lt;/li&gt; &lt;li&gt;Support for &lt;code&gt;@NonNullByDefault&lt;/code&gt; annotations that are targeted at parameters has been implemented.&lt;/li&gt; &lt;li&gt;Multiple different &lt;code&gt;@NonNullByDefault&lt;/code&gt; annotations (especially with different default values) may be placed at the same target, in which case the sets of affected locations are merged.&lt;/li&gt; &lt;li&gt;Annotations which use a meta annotation &lt;code&gt;@TypeQualifierDefault&lt;/code&gt; instead of a &lt;code&gt;DefaultLocation&lt;/code&gt;-based specification are now understood, too, e.g. &lt;code&gt;@org.springframework.lang.NonNullApi&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Version 2.2.0 of bundle &lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt; contains an annotation type &lt;code&gt;NonNullByDefault&lt;/code&gt; that can be applied to parameter and module declarations (in addition to the previously allowed targets).&lt;/p&gt; &lt;h5 id="test-sources-2"&gt;Test sources&lt;/h5&gt; &lt;p&gt;There is now support for running Java annotation processors on test sources. The output folder for files generated for these can be configured in the project properties in &lt;strong&gt;Java Compiler &amp;#62; Annotation Processing&lt;/strong&gt; as &lt;strong&gt;Generated test source directory&lt;/strong&gt;.&lt;/p&gt; &lt;p id="mZwvOlu"&gt;&lt;img class=" aligncenter size-full wp-image-508697 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dadf8a6a47.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dadf8a6a47.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dadf8a6a47.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dadf8a6a47-300x170.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h5 id="new-preference-added-compiler-compliance-does-not-match-used-jre"&gt;New preference added &amp;#8220;Compiler Compliance does not match used JRE&amp;#8221;&lt;/h5&gt; &lt;p&gt;A new preference &lt;strong&gt;Compiler Compliance does not match used JRE&lt;/strong&gt; is added to &lt;strong&gt;Compiler Preference Building Page&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;This preference indicates the severity of the problem reported when project’s used JRE does not match the compiler compliance level selected. (e.g. a project using JRE 1.8 as JRE System Library, and the compiler compliance is set to 1.7).&lt;/p&gt; &lt;p&gt;The value of this preference is by default WARNING.&lt;/p&gt; &lt;p&gt;If the JRE being used is 9 or above and the &lt;strong&gt;&amp;#8211;release&lt;/strong&gt; option is selected and even if the compiler compliance does not match the JRE being used, this option will be ignored.&lt;/p&gt; &lt;p&gt;This preference can be set as shown below:&lt;/p&gt; &lt;p id="YeQEfXB"&gt;&lt;img class=" aligncenter size-full wp-image-508707 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae46bcc27.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae46bcc27.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae46bcc27.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae46bcc27-300x252.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h4 id="java-formatter"&gt;Java Formatter&lt;/h4&gt; &lt;h5 id="new-formatter-profile-page"&gt;New formatter profile page&lt;/h5&gt; &lt;p&gt;The formatter profile preference page (&lt;strong&gt;Java &amp;#62; Code Style &amp;#62; Formatter &amp;#62; Edit…​&lt;/strong&gt;) has a new look which makes it much easier to set preferences for formatting Java code. Instead of multiple tabs, all preferences are presented in an expandable tree.&lt;/p&gt; &lt;p id="CnFXmJs"&gt;&lt;img class=" aligncenter size-full wp-image-508717 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae7a41af4.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae7a41af4.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae7a41af4.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae7a41af4-258x300.png 258w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;You can use &lt;strong&gt;filtering&lt;/strong&gt; to display only the settings with names matching a specific phrase. Filtering by values is also possible (prefix a value filter with a tilde).&lt;/p&gt; &lt;p id="wXzIaYH"&gt;&lt;img class=" aligncenter size-full wp-image-508727 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae937f8fb.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae937f8fb.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae937f8fb.png 461w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dae937f8fb-300x189.png 300w" sizes="(max-width: 461px) 100vw, 461px" /&gt;&lt;/p&gt; &lt;p&gt;Most sections have a &lt;strong&gt;Modify all&lt;/strong&gt; button in their header that lets you set all their preferences to the same value with one click.&lt;/p&gt; &lt;p id="NZhgNHv"&gt;&lt;img class=" aligncenter size-full wp-image-508737 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeaed6991.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeaed6991.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeaed6991.png 464w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeaed6991-300x123.png 300w" sizes="(max-width: 464px) 100vw, 464px" /&gt;&lt;/p&gt; &lt;p&gt;Some preferences have more convenient controls. For example, number values can be easily modified with arrow buttons. Wrap policy settings are controlled by simple toolbars so that you can see and compare multiple policies at once.&lt;/p&gt; &lt;p id="XFWyWUf"&gt;&lt;img class=" aligncenter size-full wp-image-508747 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeda443ff.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeda443ff.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeda443ff.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daeda443ff-300x107.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;In the preview panel you can now use your own code to immediately see how it will be affected by the modified settings. You can also see the raw form of standard preview samples and make temporary modifications to them.&lt;/p&gt; &lt;p id="mjfxuNq"&gt;&lt;img class=" aligncenter size-full wp-image-508757 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daefd41e8c.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daefd41e8c.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daefd41e8c.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daefd41e8c-300x82.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h5 id="formatter-align-javadoc-tags-in-columns"&gt;Formatter: align Javadoc tags in columns&lt;/h5&gt; &lt;p&gt;The formatter can now &lt;strong&gt;align names and/or descriptions&lt;/strong&gt; in Javadoc tags in new ways. The formatter profile editor is available for selection, under &lt;strong&gt;Comments &amp;#62; Javadoc&lt;/strong&gt;.&lt;/p&gt; &lt;p id="xLnblmu"&gt;&lt;img class=" aligncenter size-full wp-image-508767 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf2651e60.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf2651e60.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf2651e60.png 478w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf2651e60-300x132.png 300w" sizes="(max-width: 478px) 100vw, 478px" /&gt;&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For example, the &lt;strong&gt;Align descriptions, grouped by type&lt;/strong&gt; setting is now used in the built-in Eclipse profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;p id="RNcDaNL"&gt;&lt;img class=" aligncenter size-full wp-image-508777 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf4690f05.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf4690f05.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf4690f05.png 443w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daf4690f05-300x145.png 300w" sizes="(max-width: 443px) 100vw, 443px" /&gt;&lt;/p&gt; &lt;p&gt;The setting previously known as &lt;strong&gt;Indent Javadoc tags&lt;/strong&gt; is now called &lt;strong&gt;Align descriptions to tag width&lt;/strong&gt;. The two settings related to &lt;strong&gt;@param tags&lt;/strong&gt; also had their labels changed to better describe what they do.&lt;/p&gt; &lt;h5 id="java-code-formatter-preferences-now-styled-for-the-dark-theme"&gt;Java code formatter preferences now styled for the dark theme&lt;/h5&gt; &lt;p&gt;The formatter preferences tree styling has been fixed to work properly in the dark theme.&lt;/p&gt; &lt;h5 id="new-cleanup-action-remove-redundant-modifiers"&gt;New Cleanup Action &amp;#8220;Remove redundant modifiers&amp;#8221;&lt;/h5&gt; &lt;p&gt;The new cleanup action &amp;#8220;Remove redundant modifiers&amp;#8221; removes unnecessary modifiers on types, methods and fields. The following modifiers are removed:&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul&gt; &lt;li&gt;Interface field declarations: &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Interface method declarations: &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;abstract&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Nested interfaces: &lt;code&gt;static&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Method declarations in final classes: &lt;code&gt;final&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The cleanup action can be configured as save action on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; page.&lt;/p&gt; &lt;p id="ahxqHBA"&gt;&lt;img class=" aligncenter size-full wp-image-508787 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafac81481.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafac81481.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafac81481.png 517w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafac81481-300x219.png 300w" sizes="(max-width: 517px) 100vw, 517px" /&gt;&lt;/p&gt; &lt;h4 id="debug"&gt;Debug&lt;/h4&gt; &lt;h5 id="launch-configuration-prototypes-for-java-launch-configurations"&gt;Launch configuration prototypes for Java Launch Configurations&lt;/h5&gt; &lt;p&gt;A Java Launch Configuration can now be based on a prototype.&lt;/p&gt; &lt;p id="urTDddY"&gt;&lt;img class=" aligncenter size-full wp-image-508797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafdc21970.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafdc21970.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafdc21970.png 400w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4dafdc21970-300x209.png 300w" sizes="(max-width: 400px) 100vw, 400px" /&gt;&lt;/p&gt; &lt;p&gt;A prototype seeds attributes in its associated Java Launch Configurations with the settings specified in the Prototype tab.&lt;/p&gt; &lt;p id="iSinLjk"&gt;&lt;img class=" aligncenter size-full wp-image-508807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daff952c01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daff952c01.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daff952c01.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4daff952c01-300x142.png 300w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/p&gt; &lt;p&gt;Once a Java Launch Configuration has been created, you can override any initial settings from the prototype. You can also reset the settings of a Java Launch Configuration with the ones from its prototype. A Java Launch Configuration maintains a link to its prototype, but is a complete stand-alone launch configuration that can be launched, exported, shared, etc.&lt;/p&gt; &lt;p id="xNYQbbK"&gt;&lt;img class=" aligncenter size-full wp-image-508817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db024aa62a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db024aa62a.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db024aa62a.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db024aa62a-300x174.png 300w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/p&gt; &lt;h5 id="advanced-source-lookup-implementation"&gt;Advanced source lookup implementation&lt;/h5&gt; &lt;p&gt;More precise &lt;strong&gt;advanced&lt;/strong&gt; source lookup implementation, particularly useful when debugging applications that load classes dynamically at runtime.&lt;/p&gt; &lt;p&gt;New &lt;code&gt;org.eclipse.jdt.launching.workspaceProjectDescribers&lt;/code&gt; extension point can be used to enable advanced source lookup for projects with non-default layout, like PDE Plug-In projects.&lt;/p&gt; &lt;p&gt;New &lt;code&gt;org.eclipse.jdt.launching.sourceContainerResolvers&lt;/code&gt; can be used to download sources jar files from remote artifact repositories, like Maven Central or Eclipse P2.&lt;/p&gt; &lt;p&gt;Advanced source lookup affects debug launches only and can be enabled or disabled with &lt;strong&gt;Java &amp;#62; Debug &amp;#62; Use advanced source lookup (JRE 1.5 and higher)&lt;/strong&gt; preference option:&lt;/p&gt; &lt;p id="yXCDHwd"&gt;&lt;img class=" aligncenter size-full wp-image-508827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db06371060.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db06371060.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db06371060.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db06371060-252x300.png 252w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/p&gt; &lt;h5 id="debugger-listens-to-thread-name-changes"&gt;Debugger listens to thread name changes&lt;/h5&gt; &lt;p&gt;&lt;strong&gt;Debug view&lt;/strong&gt; now automatically updates thread names if they are changed in the debuggee JVM. This shows live information for worker instances, as described above.&lt;/p&gt; &lt;p&gt;Technically speaking, Java debugger automatically adds a new (user invisible) breakpoint in the JVM and notifies clients (like Debug view) on a breakpoint hit. If this behavior is undesired for some reason, product owners can disable it via product customization.&lt;/p&gt; &lt;p&gt;The property value is: &lt;strong&gt;org.eclipse.jdt.debug.ui/org.eclipse.jdt.debug.ui.javaDebug.ListenOnThreadNameChanges=false&lt;/strong&gt;&lt;/p&gt; &lt;h5 id="value-displayed-for-method-exit-and-exception-breakpoints"&gt;Value displayed for method exit and exception breakpoints&lt;/h5&gt; &lt;p&gt;When a &lt;strong&gt;method exit breakpoint&lt;/strong&gt; is hit, the value being returned is now shown in the variables view.&lt;/p&gt; &lt;p id="jpZTGHH"&gt;&lt;img class=" aligncenter size-full wp-image-508837 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0ce62000.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0ce62000.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0ce62000.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0ce62000-300x107.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;p&gt;Similarly, when an &lt;strong&gt;exception breakpoint&lt;/strong&gt; is hit, the exception being thrown is shown.&lt;/p&gt; &lt;p id="LtFMFCk"&gt;&lt;img class=" aligncenter size-full wp-image-508847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0e88c0dc.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0e88c0dc.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0e88c0dc.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db0e88c0dc-300x107.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h5 id="display-view-renamed-to-debug-shell"&gt;Display view renamed to Debug Shell&lt;/h5&gt; &lt;p&gt;The &lt;strong&gt;Display view&lt;/strong&gt; has been renamed to &lt;strong&gt;Debug Shell&lt;/strong&gt; to better match the features and purpose of this view. Also, a java comment is shown in the Debug Shell on fresh open that explains when and how to use it.&lt;/p&gt; &lt;p id="ZTDuabj"&gt;&lt;img class=" aligncenter size-full wp-image-508857 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db116e552e.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db116e552e.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db116e552e.png 520w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/img_5b4db116e552e-300x254.png 300w" sizes="(max-width: 520px) 100vw, 520px" /&gt;&lt;/p&gt; &lt;h3 id="and-more"&gt;And more…​&lt;/h3&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="http://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="what-is-next"&gt;What is next?&lt;/h2&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Now that JBoss Tools 4.6.0 and Red Hat Developer Studio 12.0 are out, we are already working on the next release for Eclipse 2018-09.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;linkname=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F18%2Fannouncing-devstudio-12-jboss-tools-46%2F&amp;#38;title=Announcing%20Red%20Hat%20Developer%20Studio%2012.0.0.GA%20and%20JBoss%20Tools%204.6.0.Final%20for%20Eclipse%20Photon" data-a2a-url="https://developers.redhat.com/blog/2018/07/18/announcing-devstudio-12-jboss-tools-46/" data-a2a-title="Announcing Red Hat Developer Studio 12.0.0.GA and JBoss Tools 4.6.0.Final for Eclipse Photon"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/announcing-devstudio-12-jboss-tools-46/"&gt;Announcing Red Hat Developer Studio 12.0.0.GA and JBoss Tools 4.6.0.Final for Eclipse Photon&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OOzbEZGP8Uo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Attention desktop IDE users: Red Hat Developer Studio 12.0 and the community edition, JBoss Tools 4.6.0 for Eclipse Photon, are now available. You can download a bundled installer, Developer Studio, which installs Eclipse 4.8 with all of the JBoss Tools already configured. Or, if you have an existing Eclipse 4.8 (Photon) installation, you can download the JBoss Tools package. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/18/announcing-devstudio-12-jboss-tools-46/"&gt;Announcing Red Hat Developer Studio 12.0.0.GA and JBoss Tools 4.6.0.Final for Eclipse Photon&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/18/announcing-devstudio-12-jboss-tools-46/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">508337</post-id><dc:creator>Jeff Maury</dc:creator><dc:date>2018-07-18T16:02:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/18/announcing-devstudio-12-jboss-tools-46/</feedburner:origLink></entry><entry><title>Performance baseline for jBPM 7 (7.8.0)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7SJXLb431B4/performance-baseline-for-jbpm-7-780.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="jbpm_7" scheme="searchisko:content:tags" /><category term="jbpm_baseline" scheme="searchisko:content:tags" /><category term="jbpm_benchmark" scheme="searchisko:content:tags" /><category term="jbpm_performance" scheme="searchisko:content:tags" /><category term="kie_server_performance" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><author><name>Maciej Swiderski</name></author><id>searchisko:content:id:jbossorg_blog-performance_baseline_for_jbpm_7_7_8_0</id><updated>2018-07-18T01:51:28Z</updated><published>2018-07-18T01:51:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The aim of this article is to show a base information about performance of the jBPM to set a baseline and to answer basic question how good jBPM performs when it comes to execution. This is not to be seen as competitive information or show jBPM is faster or slower than other engines but more for setting a stage and open the door for more performance tests that can be performed in different types of environments.&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Overview&lt;/h2&gt;&lt;div&gt;The performance test is executed on KIE Server so it actually measures performance of the jBPM as a running service instead of focusing on raw execution of the APIs. So anyone can perform this tests by following the instructions at the end of this article.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Environment&lt;/h2&gt;&lt;div&gt;The test has been executed on:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;community 7.8.0 single zip distribution that you can download on &lt;a href="http://jbpm.org/"&gt;jbpm.org&lt;/a&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;WildFly 11&lt;/li&gt;&lt;li&gt;Postgres data base&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;hardware&lt;/li&gt;&lt;ul&gt;&lt;li&gt;macOS 10.13.4&lt;/li&gt;&lt;li&gt;Processor Intel Core i7 2,3 GHz&lt;/li&gt;&lt;li&gt;Memory 16GB&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;JMeter as the test client&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;All components (client, application server and database) are on the same hardware, meaning they share the resources.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Scenarios&lt;/h2&gt;&lt;div&gt;There are three scenarios selected for this test that are executed with various concurrency settings.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Script task&lt;/h3&gt;&lt;div style="text-align: left;"&gt;Most basic process definition that runs directly from the beginning till the end without persisting any state in between.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-ya0BU3L9lig/W03JnXUZRSI/AAAAAAAABfI/6RklHuiiFsIWBS_i5DFSewXs69B1ajjGgCEwYBhgL/s1600/Screen%2BShot%2B2018-07-17%2Bat%2B18.46.03.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="460" data-original-width="1118" height="262" src="https://2.bp.blogspot.com/-ya0BU3L9lig/W03JnXUZRSI/AAAAAAAABfI/6RklHuiiFsIWBS_i5DFSewXs69B1ajjGgCEwYBhgL/s640/Screen%2BShot%2B2018-07-17%2Bat%2B18.46.03.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;This test consists of just single call to KIE Server.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;User task&lt;/h3&gt;&lt;div style="text-align: left;"&gt;User task based process that will persist its state when reaching user task activity. Completion of the task is done in another call.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-N416TovvgdQ/W03JnhrhINI/AAAAAAAABfM/lE5zWmONaV4kSe5Z_k4XStuBn6ySb7OagCLcBGAs/s1600/Screen%2BShot%2B2018-07-17%2Bat%2B18.46.16.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="440" data-original-width="1146" height="244" src="https://2.bp.blogspot.com/-N416TovvgdQ/W03JnhrhINI/AAAAAAAABfM/lE5zWmONaV4kSe5Z_k4XStuBn6ySb7OagCLcBGAs/s640/Screen%2BShot%2B2018-07-17%2Bat%2B18.46.16.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;This test consists of three calls to KIE Server&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;start process&lt;/li&gt;&lt;li&gt;get tasks for given process instance&lt;/li&gt;&lt;li&gt;complete first task&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Parallel script and user tasks&lt;/h3&gt;&lt;div style="text-align: left;"&gt;More advanced process definition that combines both user and script tasks with parallel gateways.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-yhTJqTRszrc/W03JXGEwGTI/AAAAAAAABfA/lFLD5yt_Q7EfjNq3fg9r8YiE56ttetuEQCLcBGAs/s1600/Screen%2BShot%2B2018-07-17%2Bat%2B18.44.28.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="637" data-original-width="1600" height="252" src="https://2.bp.blogspot.com/-yhTJqTRszrc/W03JXGEwGTI/AAAAAAAABfA/lFLD5yt_Q7EfjNq3fg9r8YiE56ttetuEQCLcBGAs/s640/Screen%2BShot%2B2018-07-17%2Bat%2B18.44.28.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div&gt;This test consists of five calls to KIE Server&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;start process&lt;/li&gt;&lt;li&gt;get tasks for given process instance&lt;/li&gt;&lt;li&gt;complete first task&lt;/li&gt;&lt;li&gt;get tasks for given process instance&lt;/li&gt;&lt;li&gt;complete second task&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Performance test&lt;/h2&gt;&lt;div style="text-align: left;"&gt;Tests are separated per scenario and then number of concurrent threads. The test is designed to run fixed number of process instances (&lt;b&gt;1000&lt;/b&gt;) in the shortest possible time.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Script task execution results&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-O93nreW2x-8/W03S-wmq_sI/AAAAAAAABfc/cN7HNMkJPfEfnNYuytaCUe0Ug0v984eTgCLcBGAs/s1600/Screen%2BShot%2B2018-07-13%2Bat%2B13.54.07.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="373" data-original-width="1168" height="204" src="https://3.bp.blogspot.com/-O93nreW2x-8/W03S-wmq_sI/AAAAAAAABfc/cN7HNMkJPfEfnNYuytaCUe0Ug0v984eTgCLcBGAs/s640/Screen%2BShot%2B2018-07-13%2Bat%2B13.54.07.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Actual figures&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;1 thread -&amp;nbsp;11 421 ms&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;4 428 ms&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;3 124 ms&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Throughput:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;1 thread -&amp;nbsp;91 instances/s&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;240 instances/s&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;361 instances/s&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;User task execution results&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-f0u-rD6-gRA/W03TMGT4ZuI/AAAAAAAABfk/-4Afd8j-yN85HMVUA0Ey2wOHYeOaOnkXACLcBGAs/s1600/Screen%2BShot%2B2018-07-13%2Bat%2B13.20.13.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="379" data-original-width="1166" height="208" src="https://2.bp.blogspot.com/-f0u-rD6-gRA/W03TMGT4ZuI/AAAAAAAABfk/-4Afd8j-yN85HMVUA0Ey2wOHYeOaOnkXACLcBGAs/s640/Screen%2BShot%2B2018-07-13%2Bat%2B13.20.13.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div&gt;Actual figures&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;1 thread -&amp;nbsp;64 439 ms&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;18 397 ms&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;13 927 ms&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Throughput:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;1 thread -&amp;nbsp;16 instances/s&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;52 instances/s&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;72 instances/s&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;b&gt;NOTE: throughput is for complete process instance execution including completion of user task&lt;/b&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;br /&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Parallel script and user tasks execution results&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-vePybn1Tw6s/W03TMMS9FqI/AAAAAAAABfg/BLzjExfYKaE71p-4SVfuBdGcyyhBIW3OQCEwYBhgL/s1600/Screen%2BShot%2B2018-07-13%2Bat%2B13.45.18.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="378" data-original-width="1171" height="206" src="https://2.bp.blogspot.com/-vePybn1Tw6s/W03TMMS9FqI/AAAAAAAABfg/BLzjExfYKaE71p-4SVfuBdGcyyhBIW3OQCEwYBhgL/s640/Screen%2BShot%2B2018-07-13%2Bat%2B13.45.18.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div&gt;Actual figures&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;1 thread -&amp;nbsp;153 543 ms&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;34 769 ms&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;20 426 ms&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Throughput:&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;ul&gt;&lt;li&gt;1 thread -&amp;nbsp;11 instances/s&lt;/li&gt;&lt;li&gt;4 threads -&amp;nbsp;45 instances/s&lt;/li&gt;&lt;li&gt;8 threads -&amp;nbsp;70 instances/s&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;NOTE: throughput is for complete process instance execution including completion of user tasks&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Conclusion&lt;/h2&gt;&lt;div style="text-align: left;"&gt;These performance results show the base performance of the jBPM execution through KIE Server - meaning it adds network and marshalling overhead. The application server or hardware has not been tuned in anyway and the sample processes are simple as well. So with that said, it's not meant to provide complete performance report but rather a base line. More advanced performance tests can be performed on dedicated hardware and with tuned application server and database for optimal performance.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;Instruction for execution&lt;/h2&gt;&lt;div style="text-align: left;"&gt;In case someone would like to try these tests themselves, here are few steps one how to do it.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Download and install jBPM 7.8.0 (or newer)&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.jbpm.org/download/download.html"&gt;download&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.jbpm.org/learn/gettingStarted.html"&gt;getting started&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Change data base to PostgreSQL or MySQL - see &lt;a href="http://www.jbpm.org/learn/gettingStarted.html"&gt;getting started&lt;/a&gt; (bottom of the page)&lt;/li&gt;&lt;li&gt;Import &lt;a href="https://github.com/mswiderski/performance-samples"&gt;this project&lt;/a&gt; into workbench on your running jBPM server&lt;/li&gt;&lt;li&gt;Download and start JMeter&lt;/li&gt;&lt;li&gt;Open &lt;a href="https://github.com/mswiderski/performance-samples/blob/master/kie-server-performance.jmx"&gt;this script&lt;/a&gt; in JMeter&lt;/li&gt;&lt;li&gt;Run the selected scenario.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7SJXLb431B4" height="1" width="1" alt=""/&gt;</content><summary>The aim of this article is to show a base information about performance of the jBPM to set a baseline and to answer basic question how good jBPM performs when it comes to execution. This is not to be seen as competitive information or show jBPM is faster or slower than other engines but more for setting a stage and open the door for more performance tests that can be performed in different types o...</summary><dc:creator>Maciej Swiderski</dc:creator><dc:date>2018-07-18T01:51:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/07/performance-baseline-for-jbpm-7-780.html</feedburner:origLink></entry><entry><title>Hibernate Validator 6.0.11.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GLmkdD0sdtY/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate Validator" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_validator_6_0_11_final_released</id><updated>2018-07-18T13:54:36Z</updated><published>2018-07-18T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released Hibernate Validator 6.0.11.Final which comes with an improved compatibility with JDK 11 and a couple of bugfixes.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.10.Final in most cases (see &lt;a href="https://developer.jboss.org/wiki/HibernateValidatorMigrationGuide"&gt;our migration guide&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="jdk-11-support"&gt;&lt;a class="anchor" href="#jdk-11-support"&gt;&lt;/a&gt;JDK 11 support&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JDK 11 does not include JAXB anymore. Instead of relying on an external dependency and because our XML descriptors are quite simple, we decided to update our XML parsing layer to use StAX directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Thus, you can now use Hibernate Validator with JDK 11 without adding a dependency to a JAXB implementation.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A big thanks to &lt;a href="https://github.com/marko-bekhta"&gt;Marko Bekhta&lt;/a&gt; for his work on this task.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All our tests (except OSGi tests for which we are waiting for a Karaf update) are now run regularly with the latest JDK 11 build.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="bug-fixes"&gt;&lt;a class="anchor" href="#bug-fixes"&gt;&lt;/a&gt;Bug fixes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The main issue we fixed is &lt;a href="https://hibernate.atlassian.net/browse/HV-1637"&gt;HV-1637&lt;/a&gt;, which caused an exception when using &lt;code&gt;@DecimalMax&lt;/code&gt; with our German and Dutch translations.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="full-changelog"&gt;&lt;a class="anchor" href="#full-changelog"&gt;&lt;/a&gt;Full changelog&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The complete list of fixed issues can be found &lt;a href="https://hibernate.atlassian.net/issues/?jql=project%20%3D%20HV%20AND%20fixVersion%20%3D%206.0.11.Final%20order%20by%20created%20DESC"&gt;on our JIRA&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-6-0-11-final"&gt;&lt;a class="anchor" href="#getting-6-0-11-final"&gt;&lt;/a&gt;Getting 6.0.11.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get the release with Maven, Gradle etc. use the GAV coordinates &lt;em&gt;org.hibernate.validator:{hibernate-validator|hibernate-validator-cdi|hibernate-validator-annotation-processor}:6.0.11.Final&lt;/em&gt;. Note that the group id has changed from &lt;code&gt;org.hibernate&lt;/code&gt; (Hibernate Validator 5 and earlier) to &lt;code&gt;org.hibernate.validator&lt;/code&gt; (from Hibernate Validator 6 onwards).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Alternatively, a distribution bundle containing all the bits is provided on SourceForge (&lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.11.Final/hibernate-validator-6.0.11.Final-dist.tar.gz/download"&gt;TAR.GZ&lt;/a&gt;, &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.11.Final/hibernate-validator-6.0.11.Final-dist.zip/download"&gt;ZIP&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to benefit from the new features of this version on WildFly, we also provide WildFly patches for &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.11.Final/hibernate-validator-modules-6.0.11.Final-wildfly-11.0.0.Final-patch.zip"&gt;WildFly 11&lt;/a&gt; and &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.11.Final/hibernate-validator-modules-6.0.11.Final-wildfly-12.0.0.Final-patch.zip"&gt;WildFly 12&lt;/a&gt;. You can read about how to apply such patches &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_updating_hibernate_validator_in_wildfly"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our efforts are now directed towards the new 6.1, which will introduce some structuring changes such as allowing getters with non standard names (&lt;code&gt;name()&lt;/code&gt; instead of &lt;code&gt;getName()&lt;/code&gt; for instance) and JSON validation support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-validator"&gt;hibernate-validator tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-validator"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/beanvalidation-dev/"&gt;Bean Validation development mailing list&lt;/a&gt; (discussions about the Bean Validation specification)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GLmkdD0sdtY" height="1" width="1" alt=""/&gt;</content><summary>We just released Hibernate Validator 6.0.11.Final which comes with an improved compatibility with JDK 11 and a couple of bugfixes. This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.10.Final in most cases (see our migration guide). What’s new JDK 11 support JDK 11 does not include JAXB anymore. Instead of relying on an external dependency a...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-07-18T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/07/18/hibernate-validator-6011-final-out/</feedburner:origLink></entry><entry><title>How to call the OpenShift REST API from C#</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oVuI5X-AeRM/" /><category term=".NET Core" /><category term="C#" /><category term="Red Hat OpenShift Container Platform" /><category term=".NET" /><category term=".NET Framework" /><category term="c++" /><category term="kubernetes" /><category term="OpenShift REST API" /><category term="Red Hat OpenShift" /><category term="Swagger" /><category term="Visual Studio" /><author><name>Takayoshi Tanaka</name></author><id>https://developers.redhat.com/blog/?p=506917</id><updated>2018-07-17T19:03:20Z</updated><published>2018-07-17T19:03:20Z</published><content type="html">&lt;p&gt;When you want to do automated tasks for builds and deployments with Red Hat OpenShift, you might want to take advantage of the &lt;a href="https://docs.openshift.com/container-platform/3.9/rest_api/index.html" target="_blank" rel="noopener"&gt;OpenShift REST API&lt;/a&gt;. In scripts you can use &lt;code&gt;oc&lt;/code&gt; CLI command which talks to the REST APIs. However there are times when it is more convenient to do this directly from your C# code without having to invoke an external program. This is the value of having an infrastructure platform that is exposed as services with an open API.&lt;/p&gt; &lt;p&gt;If you want to call the API from your C# code, you have to create a request object, call the API, and parse the response object. The upstream project, OpenShift Origin, provides &lt;a href="https://github.com/openshift/origin/blob/master/api/swagger-spec/openshift-openapi-spec.json" target="_blank" rel="noopener"&gt;a Swagger 2.0 specification&lt;/a&gt; and you can generate a client library for each programming language. Of course, C# is supported.  This isn&amp;#8217;t a new approach, Kubernetes has &lt;a href="https://github.com/kubernetes-client/csharp" target="_blank" rel="noopener"&gt;a repository&lt;/a&gt; that is generated by Swagger Codegen.&lt;/p&gt; &lt;p&gt;For C#, we can use Microsoft Visual Studio to generate a C# client library for a REST API. In this article, I&amp;#8217;ll walk you through the process of generating the library from the definition.&lt;br /&gt; &lt;span id="more-506917"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Visual Studio can accept the Swagger 2.0 definition directly, but the OpenShift Swagger 2.0 API definition has some issues generating a C# library. However, with Kubernetes, some conversions are defined ussing JSONPath, see the &lt;a href="https://github.com/kubernetes-client/gen/blob/master/openapi/csharp.xml#L45-L50" target="_blank" rel="noopener"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Following these conversions, I wrote &lt;a href="https://github.com/tanaka-takayoshi/OpenShift-CSharp-SDK/blob/3.9.0-sdk-rc1/OpenShift.OpenAPITransform/Program.cs" target="_blank" rel="noopener"&gt;some C# code&lt;/a&gt; to apply the required conversions to the original definition. If you want to generate code for your own project, please feel free to use my project to convert a definition file. Then you can generate C# code from the generated definition file.&lt;/p&gt; &lt;p&gt;Now, prepare the placeholder project in Visual Studio. The project framework should be .NET Framework instead of .NET Core. It seems this is just a limit of the tooling. You can create a .NET Core (&lt;code&gt;netstandard&lt;/code&gt; or &lt;code&gt;netcoreapp&lt;/code&gt;) client library later. After creating a .NET Framework project, right-click the&lt;strong&gt; REST API Client&lt;/strong&gt; context menu in the project and select &lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-507017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image01.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image01-300x221.png" alt="" width="300" height="221" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image01-300x221.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image01-768x565.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image01.png 967w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;Then specify the file path for the generated definition file.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-507027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02-1024x359.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02-300x105.png" alt="" width="300" height="105" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02-300x105.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02-768x269.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02-1024x359.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image02.png 1050w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;If you want to use the client library with .NET Core, please create a placeholder project. I&amp;#8217;m using a .NET Core class library project. Then, modify the &lt;code&gt;csproj&lt;/code&gt; file, as follows, to add a package reference for &lt;code&gt;Microsoft.Rest.ClientRuntime&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&amp;#60;Project Sdk="Microsoft.NET.Sdk"&amp;#62; &amp;#60;PropertyGroup&amp;#62; &amp;#60;TargetFrameworks&amp;#62;netstandard2.0&amp;#60;/TargetFrameworks&amp;#62; &amp;#60;/PropertyGroup&amp;#62; &amp;#60;ItemGroup&amp;#62; &amp;#60;PackageReference Include="Microsoft.Rest.ClientRuntime" Version="2.3.11" /&amp;#62; &amp;#60;/ItemGroup&amp;#62; &amp;#60;/Project&amp;#62; &lt;/pre&gt; &lt;p&gt;Then just simply copy and paste the folder including the generated code.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-507047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image03.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image03-300x102.png" alt="" width="300" height="102" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image03-300x102.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image03.png 388w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;I publish the &lt;a href="https://www.nuget.org/packages/OpenShift.Service.Core/3.9.0-sdk-rc1"&gt;NuGet package&lt;/a&gt; for this generated project. Since the project is not listed in the search results, please specify the full name &lt;code&gt;OpenShift.Service.Core&lt;/code&gt; to add the package reference into your own C# project. You also have to add the &lt;code&gt;Microsoft.Rest.ClientRuntime&lt;/code&gt; package reference.&lt;/p&gt; &lt;p&gt;Now you can write C# code to call the OpenShift REST API. Here is a simple example to call a GET pod REST API.&lt;/p&gt; &lt;pre&gt;//if your master URL has an invalid SSL, please add a custom validation callback. var handler = new HttpClientHandler { ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator }; //replace the acutual OpenShift master host name and your token to log in. var client = new OpenShiftAPIwithKubernetes(new Uri("https://:8443/"), new TokenCredentials(""), handler); var pods = await client.ListCoreV1NamespacedPodAsync(""); foreach (var pod in pods.Items) { Console.WriteLine(pod.Metadata.Name + "=" + pod.Status.Phase); } &lt;/pre&gt; &lt;p&gt;To get a token for test purposes, log in to the OpenShift web console and select &lt;strong&gt;Copy Login Command&lt;/strong&gt; from the context menu in the upper right corner (to the right of the user icon).&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-medium wp-image-507117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image04.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image04-300x105.png" alt="" width="300" height="105" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/07/image04-300x105.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/07/image04.png 474w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;The pasted command has the following format. Use the &lt;code&gt;master_host&lt;/code&gt; value and token value. Note that this token will expire. We recommend using &lt;a href="https://docs.openshift.com/container-platform/3.9/dev_guide/service_accounts.html" target="_blank" rel="noopener"&gt;service accounts&lt;/a&gt; for production purposes.&lt;/p&gt; &lt;pre&gt;oc login https://&amp;#60;master_host&amp;#62;:8443 --token=&amp;#60;token&amp;#62; &lt;/pre&gt; &lt;p&gt;Enjoy writing code to work with the OpenShift REST API. If you find any issues, please send feedback to &lt;a href="https://github.com/tanaka-takayoshi/OpenShift-CSharp-SDK/tree/master"&gt;my repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;linkname=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F07%2F17%2Fcalling-the-openshift-rest-api-from-your-c-code%2F&amp;#38;title=How%20to%20call%20the%20OpenShift%20REST%20API%20from%20C%23" data-a2a-url="https://developers.redhat.com/blog/2018/07/17/calling-the-openshift-rest-api-from-your-c-code/" data-a2a-title="How to call the OpenShift REST API from C#"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/17/calling-the-openshift-rest-api-from-your-c-code/"&gt;How to call the OpenShift REST API from C#&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oVuI5X-AeRM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When you want to do automated tasks for builds and deployments with Red Hat OpenShift, you might want to take advantage of the OpenShift REST API. In scripts you can use oc CLI command which talks to the REST APIs. However there are times when it is more convenient to do this directly from your C# code [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/07/17/calling-the-openshift-rest-api-from-your-c-code/"&gt;How to call the OpenShift REST API from C#&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/07/17/calling-the-openshift-rest-api-from-your-c-code/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">506917</post-id><dc:creator>Takayoshi Tanaka</dc:creator><dc:date>2018-07-17T19:03:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/07/17/calling-the-openshift-rest-api-from-your-c-code/</feedburner:origLink></entry><entry><title>Log all configuration changes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/T4t6yCez7QQ/" /><category term="feed_group_name_wildfly" scheme="searchisko:content:tags" /><category term="feed_name_hal" scheme="searchisko:content:tags" /><author><name>Harald Pehl</name></author><id>searchisko:content:id:jbossorg_blog-log_all_configuration_changes</id><updated>2018-07-17T13:30:25Z</updated><published>2018-07-17T13:30:25Z</published><content type="html">There is a feature to record all configuration changes to an in-memory log per host or server, it records any change performed on Wildfly, for example: deploy an application, add a datasource, change any configuration, add any resource. This blog post will show how it works. Notes: For this blog post, domain mode will be used. After a domain or server restart all configuration changes are lost, because this is an in-memory logging.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/T4t6yCez7QQ" height="1" width="1" alt=""/&gt;</content><summary>There is a feature to record all configuration changes to an in-memory log per host or server, it records any change performed on Wildfly, for example: deploy an application, add a datasource, change any configuration, add any resource. This blog post will show how it works. Notes: For this blog post, domain mode will be used. After a domain or server restart all configuration changes are lost, be...</summary><dc:creator>Harald Pehl</dc:creator><dc:date>2018-07-17T13:30:25Z</dc:date><feedburner:origLink>https://hal.github.io/blog/configuration-changes/</feedburner:origLink></entry><entry><title>JBoss Tools and Red Hat Developer Studio for Eclipse Photon</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bzeusGCgaZA/12.0.0.ga-for-photon.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/12.0.0.ga-for-photon.html</id><updated>2018-07-17T15:43:40Z</updated><published>2018-07-17T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.Final.html"&gt;JBoss Tools 4.6.0&lt;/a&gt; and &lt;a href="https://tools.jboss.org/downloads/devstudio/photon/12.0.0.GA.html"&gt;Red Hat Developer Studio 12.0&lt;/a&gt; for Eclipse Photon are here waiting for you. Check it out!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/blog/images/devstudio12.png" alt="devstudio12" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="installation"&gt;&lt;a class="anchor" href="#installation"&gt;&lt;/a&gt;Installation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;Red Hat Developer product page&lt;/a&gt; and run it like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java -jar devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) Developer Studio require a bit more:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release requires at least Eclipse 4.8 (Photon) but we recommend using the latest &lt;a href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/photonr"&gt;Eclipse 4.8 Photon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &amp;quot;JBoss Tools&amp;quot; or &amp;quot;Red Hat Developer Studio&amp;quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our main focus for this release was on adoption of Java10, improvements for container based development and bug fixing. Eclipse Photon itself has &lt;a href="https://www.youtube.com/watch?v=gDAb_iyO5Fc&amp;amp;list=PLy7t4z5SYNaQjVGIS9YUfZzFQpNFYpCny"&gt;a lot of new cool stuff&lt;/a&gt; but let me highlight just a few updates in both Eclipse Photon and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="openshift-3"&gt;&lt;a class="anchor" href="#openshift-3"&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="enhanced-spring-boot-support-for-server-adapter"&gt;&lt;a class="anchor" href="#enhanced-spring-boot-support-for-server-adapter"&gt;&lt;/a&gt;Enhanced Spring Boot support for server adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Spring Boot runtime was already supported by the OpenShift server adapter. However, it has one major limitation: files and resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies was not handled. This is not true anymore.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-13-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-13-server-adapter"&gt;&lt;/a&gt;Wildfly 13 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 13. It adds support for Servlet 4.0.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="fuse-tooling"&gt;&lt;a class="anchor" href="#fuse-tooling"&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="camel-rest-dsl-from-wsdl-wizard"&gt;&lt;a class="anchor" href="#camel-rest-dsl-from-wsdl-wizard"&gt;&lt;/a&gt;Camel Rest DSL from WSDL wizard&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is a new &lt;em&gt;&amp;quot;Camel Rest DSL from WSDL&amp;quot;&lt;/em&gt; wizard. This wizard wraps the &lt;a href="https://github.com/jboss-fuse/wsdl2rest"&gt;wsdl2rest tool&lt;/a&gt; now included with the Fuse 7 distribution, which takes a WSDL file for a SOAP-based (JAX-WS) web service and generates a combination of CXF-generated code and a Camel REST DSL route to make it accessible using REST operations.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To start, you need an existing Fuse Integration project in your workspace and access to the WSDL for the SOAP service. Then use &lt;em&gt;File→New→Other…​&lt;/em&gt; and select &lt;em&gt;Red Hat Fuse→Camel Rest DSL from WSDL&lt;/em&gt; wizard.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;On the first page of the wizard, select your WSDL and the Fuse Integration project in which to generate the Java code and Camel configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-one.jpg" alt="SOAP to REST Wizard page 1" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;On the second page, you can customize the Java folder path for your generated classes, the folder for the generated Camel file, plus any customization for the SOAP service address and destination REST service address.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-two.jpg" alt="SOAP to REST Wizard page 2" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the new Camel configuration and associated Java code are generated in your project. The wizard determines whether your project is Blueprint, Spring, or Spring Boot based, and it creates the corresponding artifacts without requiring any additional input. When the wizard is finished, you can open your new Camel file in the Fuse Tooling Route Editor to view what it created.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-no-properties.jpg" alt="Fuse Tooling editor Rest Tab" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;That brings us to another new functionality, the REST tab in the Fuse Tooling Route Editor.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="camel-editor-rest-tab"&gt;&lt;a class="anchor" href="#camel-editor-rest-tab"&gt;&lt;/a&gt;Camel Editor REST tab&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Fuse Tooling Route Editor provides a new &lt;em&gt;REST&lt;/em&gt; tab. For this release, the contents of this tab is read-only and includes the following information:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Details for the REST Configuration element including the component (jetty, netty, servlet, etc.), the context path, the port, binding mode (JSON, XML, etc.), and host. There is only one REST Configuration element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A list of REST elements that collect REST operations. A configuration can have more than one REST element. Each REST element has an associated property page that displays additional details such as the path and the data it consumes or produces.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-rest-element-properties.jpg" alt="Fuse Tooling Rest Elements Properties View" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A list of REST operations for the selected REST element. Each of the operations has an associated property page that provides details such as the URI and output type.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-rest-operation-properties.jpg" alt="Fuse Tooling Rest Operations Properties View" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For this release, the REST tab is read-only. If you want to edit the REST DSL, use the Route Editor Source tab. When you make changes and save them in the Source tab, the REST tab refreshes to show your updates.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="camel-uri-completion-with-xml-dsl"&gt;&lt;a class="anchor" href="#camel-uri-completion-with-xml-dsl"&gt;&lt;/a&gt;Camel URI completion with XML DSL&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As announced &lt;a href="https://developers.redhat.com/blog/2018/01/31/apache-camel-uri-completion-eclipse-xml-editor/"&gt;here&lt;/a&gt;, it was already possible to have Camel URI completion with XML DSL in the source tab of the Camel Route editor by installing the &lt;a href="https://github.com/camel-tooling/camel-lsp-client-eclipse"&gt;Language Support for Apache Camel&lt;/a&gt; in your IDE.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This feature is now installed by default with Fuse Tooling!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/fusetools/images/completionSourceEditor.gif" alt="Camel URI completion in source tab of Camel Editor" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="maven"&gt;&lt;a class="anchor" href="#maven"&gt;&lt;/a&gt;Maven&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="maven-support-updated-to-m2e-1-9-1"&gt;&lt;a class="anchor" href="#maven-support-updated-to-m2e-1-9-1"&gt;&lt;/a&gt;Maven support updated to M2E 1.9.1&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Maven support is based on Eclipse M2E 1.9.1, bringing the following features:&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="advanced-classpath-isolation"&gt;&lt;a class="anchor" href="#advanced-classpath-isolation"&gt;&lt;/a&gt;Advanced classpath isolation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Thanks to Eclipse Photon, there are new two different classpathes, the main and the test classpath. The main classes will now no longer see the test classes and dependencies&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="embedded-maven-runtime"&gt;&lt;a class="anchor" href="#embedded-maven-runtime"&gt;&lt;/a&gt;Embedded Maven runtime&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The embedded Maven runtime is now based on Apache Maven 3.5.3.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="archetype-catalog-management"&gt;&lt;a class="anchor" href="#archetype-catalog-management"&gt;&lt;/a&gt;Archetype catalog management&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is now possible to disable an archetype catalog.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="java-9-10-support"&gt;&lt;a class="anchor" href="#java-9-10-support"&gt;&lt;/a&gt;Java 9/10 support&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Support for Java 9/10 has been improved: bugs fixes, better handling of module path.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="java-developement-tools-jdt"&gt;&lt;a class="anchor" href="#java-developement-tools-jdt"&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-java-10"&gt;&lt;a class="anchor" href="#support-for-java-10"&gt;&lt;/a&gt;Support for Java™ 10&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-fix-to-change-project-compliance-and-jre-to-10"&gt;&lt;a class="anchor" href="#quick-fix-to-change-project-compliance-and-jre-to-10"&gt;&lt;/a&gt;Quick fix to change project compliance and JRE to 10&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A quick fix &lt;strong&gt;Change project compliance and JRE to 10&lt;/strong&gt; is provided to quickly change the current project to be compatible with Java 10.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/quickfix-change-compliance-10.png" alt="quickfix change compliance 10" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-editor"&gt;&lt;a class="anchor" href="#java-editor"&gt;&lt;/a&gt;Java Editor&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="quick-fix-to-add-nonnullbydefault-to-packages"&gt;&lt;a class="anchor" href="#quick-fix-to-add-nonnullbydefault-to-packages"&gt;&lt;/a&gt;Quick Fix to add @NonNullByDefault to packages&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quick fix is offered to fix issues that are reported when the Missing &amp;apos;@NonNullByDefault&amp;apos; annotation on package warning is enabled. If the package already has a &lt;code&gt;&lt;code&gt;package-info.java&lt;/code&gt;&lt;/code&gt;, the quick fix can be invoked from the editor:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/add-nnbd-existing-packageinfo.png" alt="add nnbd existing packageinfo" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Otherwise, the quick fix must be invoked from the problems view, and will create a &lt;code&gt;&lt;code&gt;package-info.java&lt;/code&gt;&lt;/code&gt; with the required annotation:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/add-nnbd-create-packageinfo.png" alt="add nnbd create packageinfo" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When invoked from the problems view, both variations of the quick fix can fix the problem for multiple packages simultaneously.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="navigate-to-switch-statement"&gt;&lt;a class="anchor" href="#navigate-to-switch-statement"&gt;&lt;/a&gt;Navigate to &amp;apos;switch&amp;apos; statement&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can now &lt;strong&gt;Ctrl+click&lt;/strong&gt; or use &lt;strong&gt;Open Declaration (F3)&lt;/strong&gt; on case or default keywords to quickly navigate to the beginning of the switch statement.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/navigate-to-switch.png" alt="navigate to switch" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="escape-non-ascii-characters-when-pasting-into-a-string-literal"&gt;&lt;a class="anchor" href="#escape-non-ascii-characters-when-pasting-into-a-string-literal"&gt;&lt;/a&gt;Escape non-ASCII characters when pasting into a string literal&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Typing &amp;gt; Escape text when pasting into a string literal&lt;/strong&gt; preference option now has a suboption &lt;strong&gt;Use Unicode escape syntax for non-ASCII characters&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/escape-non-ascii-settings.png" alt="escape non ascii settings" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When enabled, characters outside the visible ASCII range will be replaced by unicode escape sequences when pasted into a string:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/escape-non-ascii-example.png" alt="escape non ascii example" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="improved-java-syntax-coloring-in-the-dark-theme"&gt;&lt;a class="anchor" href="#improved-java-syntax-coloring-in-the-dark-theme"&gt;&lt;/a&gt;Improved Java syntax coloring in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To improve readability in the dark theme, bold style usage has been reduced and some colors that were too close to each other have been altered.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/java-syntax-dark.png" alt="java syntax dark" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="improved-coloring-of-links-in-code-element-information-in-the-dark-theme"&gt;&lt;a class="anchor" href="#improved-coloring-of-links-in-code-element-information-in-the-dark-theme"&gt;&lt;/a&gt;Improved coloring of links in code element information in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The colors of links in code element information control now takes the color settings of the &lt;strong&gt;Hyperlink text color&lt;/strong&gt; and the &lt;strong&gt;Active hyperlink text color&lt;/strong&gt; from the &lt;strong&gt;Colors &amp;amp; Fonts&lt;/strong&gt; preference page into account. The readability in the dark theme has been improved a lot by this.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Before:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/element_info_before.png" alt="element info before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/element_info_after.png" alt="element info after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="improved-coloring-of-inherited-members-in-the-quick-outline-in-the-dark-theme"&gt;&lt;a class="anchor" href="#improved-coloring-of-inherited-members-in-the-quick-outline-in-the-dark-theme"&gt;&lt;/a&gt;Improved coloring of inherited members in the Quick Outline in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Eclipse default dark theme now includes styling of inherited members in JDT’s &lt;strong&gt;Quick Outline&lt;/strong&gt;. This improves readability in the dark theme a lot. The color can be configured via the &lt;strong&gt;Java &amp;gt; Inherited Members&lt;/strong&gt; color definition on the &lt;strong&gt;Colors and Fonts&lt;/strong&gt; preference page.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Before:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/inherited_before.png" alt="inherited before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/inherited_after.png" alt="inherited after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-views-and-dialogs"&gt;&lt;a class="anchor" href="#java-views-and-dialogs"&gt;&lt;/a&gt;Java Views and Dialogs&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="test-sources"&gt;&lt;a class="anchor" href="#test-sources"&gt;&lt;/a&gt;Test sources&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the &lt;strong&gt;Java Build Path&lt;/strong&gt; project settings, there is now an attribute &lt;strong&gt;Contains test sources&lt;/strong&gt; to configure that a source folder contains test sources. (Note: test sources must have their own output folder). Similarly, for projects and libraries there is an attribute &lt;strong&gt;Visible only for test sources&lt;/strong&gt;. This setting also exists for classpath containers, and if it is set to &lt;strong&gt;Yes&lt;/strong&gt; for one of these, this value will be used for all contained libraries and projects.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/1-sourcefolder-settings-521330.png" alt="1 sourcefolder settings 521330" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Test source folders and dependencies are shown with a darker icon in the build path settings, the package explorer and other locations. This can be disabled in &lt;strong&gt;Preferences &amp;gt; Java &amp;gt; Appearance&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/1a-modified-test-icon-preferences-530179.png" alt="1a modified test icon preferences 530179" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Referenced projects can contain test sources and have test dependencies themselves. Usually, when test sources are compiled, the test code in projects on the build path will be visible. As this is not always desirable, it can be changed by setting the new build path attribute &lt;strong&gt;Without test code&lt;/strong&gt;, that is available for projects, to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/2-without-test-code-526858.png" alt="2 without test code 526858" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Build path entries configured like this have a decoration [without test code] after the project name, which can be disabled in &lt;strong&gt;Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Label Decorations&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/2a-without-test-code-decorator-530179.png" alt="2a without test code decorator 530179" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For each project, compilation is now done in two phases: First all main sources (which cannot see any test-code on the build-path) and then all test sources.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/3-visibilities-224708.png" alt="3 visibilities 224708" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As a consequence, if the project is a modular Java 9 project, test dependencies like JUnit can not be referenced in the &lt;code&gt;&lt;code&gt;module-info.java&lt;/code&gt;&lt;/code&gt;, as they will not be visible while compiling it. The solution used to handle this is the same, that Maven uses: When test dependencies are put on the classpath, the module being compiled will automatically be configured to read the unnamed module during the compilation of the test sources, so the test dependencies will be visible.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Of course, code completion will not suggest test code in main sources:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/4a-completion-in-main-521331.png" alt="4a completion in main 521331" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There are now two dynamic Java working sets &lt;strong&gt;Java Main Sources&lt;/strong&gt; and &lt;strong&gt;Java Test Sources&lt;/strong&gt; containing the source folders grouped according to value of the &lt;strong&gt;Contains test sources&lt;/strong&gt; attribute. This can for example be used to remove warnings in test sources from the problems view:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/5a-problems-view-521336.png" alt="5a problems view 521336" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To achieve this, create a new filter that shows warnings for the &lt;strong&gt;Java Main Sources&lt;/strong&gt; working set and select it with the &lt;strong&gt;All Errors on Workspace&lt;/strong&gt; filter:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/5b-problems-view-filters-521336.png" alt="5b problems view filters 521336" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There are also dedicated filters to quickly remove hits in main code or test code from Java search results:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/6-filter-search-result-521332.png" alt="6 filter search result 521332" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Similar, there is a filter to remove test code from &lt;strong&gt;Call hierarchies&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/7-filter-call-hierarchy-521335.png" alt="7 filter call hierarchy 521335" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Another filter to remove test code exists for &lt;strong&gt;Quick type hierarchies&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/8-filter-quick-type-hierarchy-521333.png" alt="8 filter quick type hierarchy 521333" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Test source folders will be preselected in the &lt;strong&gt;New JUnit Test Case&lt;/strong&gt; wizard&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/9-new-junit-332602.png" alt="9 new junit 332602" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In Run and Debug configurations, the &lt;strong&gt;Classpath&lt;/strong&gt; tab (or &lt;strong&gt;Dependencies&lt;/strong&gt; tab when launching with Java 9) contains a new option &lt;strong&gt;Exclude Test Code&lt;/strong&gt;, that is automatically preselected when launching a Java Application from a source folder that is not marked to contain test sources:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/10-launching-529321.png" alt="10 launching 529321" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When launching with Java 9 and this option is not selected, command line options will automatically be added so modules that have a non-empty classpath read the unnamed module. These command line options are part of what can be overridden using the new &lt;strong&gt;Override Dependencies&lt;/strong&gt; button.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="sort-library-entries-alphabetically-in-package-explorer"&gt;&lt;a class="anchor" href="#sort-library-entries-alphabetically-in-package-explorer"&gt;&lt;/a&gt;Sort library entries alphabetically in Package Explorer&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The content of libraries are displayed in the order of the classpath. This makes it difficult to find specific libraries by their name, especially when projects have many dependencies. The library entries can now be sorted alphabetically when setting the preference &lt;strong&gt;Sort library entries alphabetically in Package Explorer&lt;/strong&gt; on the &lt;strong&gt;Java &amp;gt; Appearance&lt;/strong&gt; preference page:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/jdt_sort_library_pref.png" alt="jdt sort library pref" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/jdt_library_entries_unsorted.png" alt="jdt library entries unsorted" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The default for this preference is &lt;strong&gt;OFF&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="generate-dialogs-use-verbs-instead-of-ok"&gt;&lt;a class="anchor" href="#generate-dialogs-use-verbs-instead-of-ok"&gt;&lt;/a&gt;Generate dialogs use verbs instead of OK&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Generate…​&lt;/strong&gt; dialogs of the Java tools have been adapted to use verbs instead of OK.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-compiler"&gt;&lt;a class="anchor" href="#java-compiler"&gt;&lt;/a&gt;Java Compiler&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="option-for-regex-in-module-declaration-search"&gt;&lt;a class="anchor" href="#option-for-regex-in-module-declaration-search"&gt;&lt;/a&gt;Option for Regex in Module Declaration Search&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is an &lt;strong&gt;experimental&lt;/strong&gt; support provided to allow the regular expression usage in search field while searching for module declaration. This can be considered as a wrapper of the API change.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To invoke the regular expression search from the search field under &lt;strong&gt;Java Search&lt;/strong&gt;, start the expression with &amp;quot;/r &amp;quot; i.e, a slash &amp;apos;/&amp;apos;, the letter &amp;apos;r&amp;apos; and a blank &amp;apos; &amp;apos; (not tab) followed by a regex, an example of which is shown below:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/mod.regex.trap.png" alt="mod.regex.trap" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the above example, all the characters trailing &amp;quot;/r &amp;quot; form a Java regular expression to denote a module name which starts with zero or more &amp;apos;n’s followed by the string &amp;quot;.ver&amp;quot; and followed again by zero or more number of arbitrary characters.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Another example would be to search for all modules that start with &lt;code&gt;&lt;code&gt;java.x&lt;/code&gt;&lt;/code&gt; followed by zero or more characters which is given by the regular expression &lt;code&gt;&lt;code&gt;/r java\.x.*&lt;/code&gt;&lt;/code&gt; - note the backslash for . to consider this as a &amp;quot;normal&amp;quot; character instead of the special regex].&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Yet another example would be search for all module names that start with j followed by zero or more characters and ending with .xml which in regex language translates to &lt;code&gt;&lt;code&gt;/r j.*\.xml&lt;/code&gt;&lt;/code&gt;. Please note that here the first &amp;apos;.&amp;apos; is the special regex character while the second &amp;apos;.&amp;apos; is escaped to denote that this is a normal character.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should use this only for &lt;strong&gt;Declarations&lt;/strong&gt; search for modules as it is not implemented for module references. Selecting &lt;strong&gt;All occurrences&lt;/strong&gt; in conjunction with regex will default to finding only the &lt;strong&gt;Declarations&lt;/strong&gt; matching the regex ignoring the references.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="nonnullbydefault-per-module"&gt;&lt;a class="anchor" href="#nonnullbydefault-per-module"&gt;&lt;/a&gt;@NonNullByDefault per module&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If a module is annotated with &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt;, the compiler will interpret this as the global default for all types in this module:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@org.eclipse.jdt.annotation.NonNullByDefault module my.nullsafe.mod { ...&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note, however, that this requires an annotation type declared either with target &lt;code&gt;&lt;code&gt;ElementType.MODULE&lt;/code&gt;&lt;/code&gt;, or with no explicit target at all. Versions 2.2.0 and greater of bundle &lt;code&gt;&lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt;&lt;/code&gt; use the latter strategy and hence support a module-wide non-null default.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="nonnullbydefault-improvements"&gt;&lt;a class="anchor" href="#nonnullbydefault-improvements"&gt;&lt;/a&gt;@NonNullByDefault improvements&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using annotation-based null analysis, there are now more ways to define which unannotated locations are implicitly assumed to be annotated as &lt;code&gt;&lt;code&gt;@NonNull&lt;/code&gt;&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations based on enum &lt;code&gt;&lt;code&gt;DefaultLocation&lt;/code&gt;&lt;/code&gt; can also be used if the primary nullness annotations are declaration annotations (previously this was supported only for &lt;code&gt;&lt;code&gt;TYPE_USE&lt;/code&gt;&lt;/code&gt; annotations).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations that are targeted at parameters has been implemented.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Multiple different &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations (especially with different default values) may be placed at the same target, in which case the sets of affected locations are merged.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Annotations which use a meta annotation &lt;code&gt;&lt;code&gt;@TypeQualifierDefault&lt;/code&gt;&lt;/code&gt; instead of a &lt;code&gt;&lt;code&gt;DefaultLocation&lt;/code&gt;&lt;/code&gt;-based specification are now understood, too, e.g. &lt;code&gt;&lt;code&gt;@org.springframework.lang.NonNullApi&lt;/code&gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Version 2.2.0 of bundle &lt;code&gt;&lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt;&lt;/code&gt; contains an annotation type &lt;code&gt;&lt;code&gt;NonNullByDefault&lt;/code&gt;&lt;/code&gt; that can be applied to parameter and module declarations (in addition to the previously allowed targets).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="test-sources-2"&gt;&lt;a class="anchor" href="#test-sources-2"&gt;&lt;/a&gt;Test sources&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There is now support for running Java annotation processors on test sources. The output folder for files generated for these can be configured in the project properties in &lt;strong&gt;Java Compiler &amp;gt; Annotation Processing&lt;/strong&gt; as &lt;strong&gt;Generated test source directory&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/testsources-apt-531072.png" alt="testsources apt 531072" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-preference-added-compiler-compliance-does-not-match-used-jre"&gt;&lt;a class="anchor" href="#new-preference-added-compiler-compliance-does-not-match-used-jre"&gt;&lt;/a&gt;New preference added &amp;quot;Compiler Compliance does not match used JRE&amp;quot;&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new preference &lt;strong&gt;Compiler Compliance does not match used JRE&lt;/strong&gt; is added to &lt;strong&gt;Compiler Preference Building Page&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This preference indicates the severity of the problem reported when project’s used JRE does not match the compiler compliance level selected. (e.g. a project using JRE 1.8 as JRE System Library, and the compiler compliance is set to 1.7).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The value of this preference is by default WARNING.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If the JRE being used is 9 or above and the &lt;strong&gt;--release&lt;/strong&gt; option is selected and even if the compiler compliance does not match the JRE being used, this option will be ignored.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This preference can be set as shown below:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/jdt_compiler_compliance_mismatch_JRE.png" alt="jdt compiler compliance mismatch JRE" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-formatter"&gt;&lt;a class="anchor" href="#java-formatter"&gt;&lt;/a&gt;Java Formatter&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-formatter-profile-page"&gt;&lt;a class="anchor" href="#new-formatter-profile-page"&gt;&lt;/a&gt;New formatter profile page&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The formatter profile preference page (&lt;strong&gt;Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​&lt;/strong&gt;) has a new look which makes it much easier to set preferences for formatting Java code. Instead of multiple tabs, all preferences are presented in an expandable tree.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-overview.png" alt="formatter profile overview" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can use &lt;strong&gt;filtering&lt;/strong&gt; to display only the settings with names matching a specific phrase. Filtering by values is also possible (prefix a value filter with a tilde).&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-filtering.png" alt="formatter profile filtering" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Most sections have a &lt;strong&gt;Modify all&lt;/strong&gt; button in their header that lets you set all their preferences to the same value with one click.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-modify-all.png" alt="formatter profile modify all" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Some preferences have more convenient controls. For example, number values can be easily modified with arrow buttons. Wrap policy settings are controlled by simple toolbars so that you can see and compare multiple policies at once.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-wrap-settings.png" alt="formatter profile wrap settings" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the preview panel you can now use your own code to immediately see how it will be affected by the modified settings. You can also see the raw form of standard preview samples and make temporary modifications to them.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-preview.png" alt="formatter profile preview" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="formatter-align-javadoc-tags-in-columns"&gt;&lt;a class="anchor" href="#formatter-align-javadoc-tags-in-columns"&gt;&lt;/a&gt;Formatter: align Javadoc tags in columns&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The formatter can now &lt;strong&gt;align names and/or descriptions&lt;/strong&gt; in Javadoc tags in new ways. The formatter profile editor is available for selection, under &lt;strong&gt;Comments &amp;gt; Javadoc&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-javadoc-prefs.png" alt="formatter javadoc prefs" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For example, the &lt;strong&gt;Align descriptions, grouped by type&lt;/strong&gt; setting is now used in the built-in Eclipse profile.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/formatter-javadoc-preview.png" alt="formatter javadoc preview" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The setting previously known as &lt;strong&gt;Indent Javadoc tags&lt;/strong&gt; is now called &lt;strong&gt;Align descriptions to tag width&lt;/strong&gt;. The two settings related to &lt;strong&gt;@param tags&lt;/strong&gt; also had their labels changed to better describe what they do.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="java-code-formatter-preferences-now-styled-for-the-dark-theme"&gt;&lt;a class="anchor" href="#java-code-formatter-preferences-now-styled-for-the-dark-theme"&gt;&lt;/a&gt;Java code formatter preferences now styled for the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The formatter preferences tree styling has been fixed to work properly in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="new-cleanup-action-remove-redundant-modifiers"&gt;&lt;a class="anchor" href="#new-cleanup-action-remove-redundant-modifiers"&gt;&lt;/a&gt;New Cleanup Action &amp;quot;Remove redundant modifiers&amp;quot;&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new cleanup action &amp;quot;Remove redundant modifiers&amp;quot; removes unnecessary modifiers on types, methods and fields. The following modifiers are removed:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Interface field declarations: &lt;code&gt;&lt;code&gt;public&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;static&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;final&lt;/code&gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Interface method declarations: &lt;code&gt;&lt;code&gt;public&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;abstract&lt;/code&gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Nested interfaces: &lt;code&gt;&lt;code&gt;static&lt;/code&gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Method declarations in final classes: &lt;code&gt;&lt;code&gt;final&lt;/code&gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The cleanup action can be configured as save action on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; page.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/jdt_remove_redundant_modifiers.png" alt="jdt remove redundant modifiers" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug"&gt;&lt;a class="anchor" href="#debug"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="launch-configuration-prototypes-for-java-launch-configurations"&gt;&lt;a class="anchor" href="#launch-configuration-prototypes-for-java-launch-configurations"&gt;&lt;/a&gt;Launch configuration prototypes for Java Launch Configurations&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A Java Launch Configuration can now be based on a prototype.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/prototype-java-launch-configuration.png" alt="prototype java launch configuration" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A prototype seeds attributes in its associated Java Launch Configurations with the settings specified in the Prototype tab.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/prototype-tab-java-launch-configuration-1.png" alt="prototype tab java launch configuration 1" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once a Java Launch Configuration has been created, you can override any initial settings from the prototype. You can also reset the settings of a Java Launch Configuration with the ones from its prototype. A Java Launch Configuration maintains a link to its prototype, but is a complete stand-alone launch configuration that can be launched, exported, shared, etc.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/prototype-tab-java-launch-configuration-2.png" alt="prototype tab java launch configuration 2" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="advanced-source-lookup-implementation"&gt;&lt;a class="anchor" href="#advanced-source-lookup-implementation"&gt;&lt;/a&gt;Advanced source lookup implementation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;More precise &lt;strong&gt;advanced&lt;/strong&gt; source lookup implementation, particularly useful when debugging applications that load classes dynamically at runtime.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New &lt;code&gt;&lt;code&gt;org.eclipse.jdt.launching.workspaceProjectDescribers&lt;/code&gt;&lt;/code&gt; extension point can be used to enable advanced source lookup for projects with non-default layout, like PDE Plug-In projects.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New &lt;code&gt;&lt;code&gt;org.eclipse.jdt.launching.sourceContainerResolvers&lt;/code&gt;&lt;/code&gt; can be used to download sources jar files from remote artifact repositories, like Maven Central or Eclipse P2.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Advanced source lookup affects debug launches only and can be enabled or disabled with &lt;strong&gt;Java &amp;gt; Debug &amp;gt; Use advanced source lookup (JRE 1.5 and higher)&lt;/strong&gt; preference option:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/advanced-source-lookup.png" alt="advanced source lookup" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="debugger-listens-to-thread-name-changes"&gt;&lt;a class="anchor" href="#debugger-listens-to-thread-name-changes"&gt;&lt;/a&gt;Debugger listens to thread name changes&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Debug view&lt;/strong&gt; now automatically updates thread names if they are changed in the debuggee JVM. This shows live information for worker instances, as described above.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Technically speaking, Java debugger automatically adds a new (user invisible) breakpoint in the JVM and notifies clients (like Debug view) on a breakpoint hit. If this behavior is undesired for some reason, product owners can disable it via product customization.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The property value is: &lt;strong&gt;org.eclipse.jdt.debug.ui/org.eclipse.jdt.debug.ui.javaDebug.ListenOnThreadNameChanges=false&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="value-displayed-for-method-exit-and-exception-breakpoints"&gt;&lt;a class="anchor" href="#value-displayed-for-method-exit-and-exception-breakpoints"&gt;&lt;/a&gt;Value displayed for method exit and exception breakpoints&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When a &lt;strong&gt;method exit breakpoint&lt;/strong&gt; is hit, the value being returned is now shown in the variables view.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/returningvalue.png" alt="returningvalue" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Similarly, when an &lt;strong&gt;exception breakpoint&lt;/strong&gt; is hit, the exception being thrown is shown.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/throwingexception.png" alt="throwingexception" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="display-view-renamed-to-debug-shell"&gt;&lt;a class="anchor" href="#display-view-renamed-to-debug-shell"&gt;&lt;/a&gt;Display view renamed to Debug Shell&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Display view&lt;/strong&gt; has been renamed to &lt;strong&gt;Debug Shell&lt;/strong&gt; to better match the features and purpose of this view. Also, a java comment is shown in the Debug Shell on fresh open that explains when and how to use it.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.8/images/debugShell.png" alt="debugShell" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Having JBoss Tools 4.6.0 and Red Hat Developer Studio 12.0 out we are already working on the next release for Eclipse 2018-09.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bzeusGCgaZA" height="1" width="1" alt=""/&gt;</content><summary>JBoss Tools 4.6.0 and Red Hat Developer Studio 12.0 for Eclipse Photon are here waiting for you. Check it out! Installation Red Hat Developer Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat Developer product page and run it like this: java -jar devstudio-&lt;installername&gt;.jar JBoss Tools or Bring-Your-Own-Eclipse (BYOE) Developer Studio require a bit more: This release requires at least Eclipse 4.8 (Photon) but we recommend using the latest Eclipse 4.8 Photon JEE Bundle since then you get most of the dependencies preinstalled. Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under "JBoss Tools" or...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2018-07-17T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/12.0.0.ga-for-photon.html</feedburner:origLink></entry><entry><title>Byteman 4.0.4 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XTfLQ3WoaK0/byteman-404-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_4_has_been_released</id><updated>2018-07-16T20:34:00Z</updated><published>2018-07-16T20:34:00Z</published><content type="html">Byteman 4.0.4 is now available from the &lt;a href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.3 updates the 4.0.3 release to ensure that it works&amp;nbsp; correctly on the latest jdk11 releases. Specifically, it ensures that Byteman is able to process class files with a JDK11 class file version (the previous release would run on jdk11 but could only classes whose bytecode file version was for jdk10 or lower. More details can be found in the &lt;a href="http://downloads.jboss.org/byteman/4.0.4/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XTfLQ3WoaK0" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.4 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.3 updates the 4.0.3 release to ensure that it works  correctly on the latest jdk11 releases. Specifically, it ensures that Byteman is able to process class fil...</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2018-07-16T20:34:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2018/07/byteman-404-has-been-released.html</feedburner:origLink></entry><entry><title>Red Hat Process Automation Manager v7.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Rt6jvJVSi8E/red-hat-process-automation-manager-v70.html" /><category term="feed_group_name_jbpm" scheme="searchisko:content:tags" /><category term="feed_name_kverlaen" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="jbpm7" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="product" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Kris Verlaenen</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_process_automation_manager_v7_0</id><updated>2018-07-16T15:38:32Z</updated><published>2018-07-16T15:38:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: justify;"&gt;jBPM is completely open-source and therefore most of my blogs are typically about the latest and greatest feature that was just introduced in the community.&amp;nbsp; However, Red Hat also offers a supported version, with the testing, certification, and maintenance releases necessary for enterprise production use (for a quick intro on potential differences, take for example a look &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/community-or-enterprise"&gt;here&lt;/a&gt;).&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;And recently, as announced in this &lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-unveils-next-generation-process-automation-offering"&gt;press release&lt;/a&gt;, Red Hat unveiled &lt;b&gt;&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/process-automation-manager"&gt;&lt;i&gt;Red Hat Process Automation Manager 7&lt;/i&gt;&lt;/a&gt;.&lt;/b&gt;&amp;nbsp; The most obvious change you might notice immediately is that the product was renamed - formerly known as Red Hat JBoss BPM Suite.&amp;nbsp; Since jBPM has evolved beyond just BPM - with features such as decision management, case management and constraint solving closely integrated - it was time to also reflect that in the product naming.&amp;nbsp; Similarly, &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/decision-manager"&gt;&lt;i&gt;Red Hat Decision Manager 7&lt;/i&gt;&lt;/a&gt; was released a few months ago, focusing on the Drools and Optaplanner bits.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;However, nothing changes structurally.&amp;nbsp; Red Hat Process Automation Manager is based on jBPM (to be more precise, it was based on the jBPM 7.7.0.Final release) and actually is a super-set of Red Hat Decision Manager, so it also includes all the rules and constraint solving capabilities as well (Drools and Optaplanner).&amp;nbsp; Since it is completely open-source, you will see the same set of components there as you see in the community: the process execution server (kie-server), the web-based console (business-central aka the workbench - for both authoring and runtime deployment and administration), smart router, controller, Eclipse tooling, etc.&amp;nbsp; OpenShift images and templates (supporting these capabilities in the cloud) are available too for those targeting cloud deployment.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Red Hat Process Automation Manager also includes an advanced open source user experience platform from Red Hat partner &lt;i&gt;Entando&lt;/i&gt;. It can be used to quickly develop modern UI/UX layers for user interaction with business process applications, including a drag &amp;amp; drop UI development tool with widgets to create task lists, forms, process graphs, etc. &lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Red Hat Process Automation Manager is part of the &lt;a href="https://www.redhat.com/en/topics/automation/whats-business-automation"&gt;Business Automation portfolio&lt;/a&gt;, which includes Red Hat Process Automation Manager and Red Hat Decision Manager, but also the Red Hat Mobile Application Platform and in the future also big data analytics through Daikon.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;More questions?&amp;nbsp; Take a look at the &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/process-automation-manager"&gt;product pages&lt;/a&gt; !&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Rt6jvJVSi8E" height="1" width="1" alt=""/&gt;</content><summary>jBPM is completely open-source and therefore most of my blogs are typically about the latest and greatest feature that was just introduced in the community.  However, Red Hat also offers a supported version, with the testing, certification, and maintenance releases necessary for enterprise production use (for a quick intro on potential differences, take for example a look here). And recently, as a...</summary><dc:creator>Kris Verlaenen</dc:creator><dc:date>2018-07-16T15:38:00Z</dc:date><feedburner:origLink>http://kverlaen.blogspot.com/2018/07/red-hat-process-automation-manager-v70.html</feedburner:origLink></entry></feed>
