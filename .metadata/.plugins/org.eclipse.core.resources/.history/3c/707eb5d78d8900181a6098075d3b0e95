package com.capgemini.chess.algorithms.implementation;

import com.capgemini.chess.algorithms.data.Coordinate;
import com.capgemini.chess.algorithms.data.enums.Color;
import com.capgemini.chess.algorithms.data.enums.Piece;
import com.capgemini.chess.algorithms.data.enums.PieceType;
import com.capgemini.chess.algorithms.data.generated.Board;
import com.capgemini.chess.algorithms.implementation.exceptions.InvalidCoordinatesException;

public class PossibleMoveManager {

	public boolean checkMovePossibility(Coordinate from, Coordinate to, Board board) throws InvalidCoordinatesException {

		Piece currentPiece = board.getPieceAt(from);
		PieceType currentPieceType = currentPiece.getType();
		Piece capturedPiece = board.getPieceAt(to);

		int currentx = from.getX();
		int currenty = from.getY();
		int newx = to.getX();
		int newy = to.getY();

		switch (currentPieceType)

		{
		case PAWN:
			//MOZE O DWA JAK BLOKUJE INNY???????
			//White Player
			if (currentPiece.getColor()==Color.WHITE){
				//Capture - move diagonally
				if ((currentx==newx-1 || currentx==newx+1) && currenty==newy+1 && capturedPiece.getColor()==Color.BLACK){
					return true;
				}
				//Move straight
				if (currenty==1){
					if ((newy-currenty==1 || newy-currenty==2) && newx==currentx && (board.getPieceAt(new Coordinate(currentx, currenty+1)))==null){
						return true;
					}
					else{
						throw new InvalidCoordinatesException("Invalid move!");
					}
				}
				else{
					if (newy-currenty==1 && newx==currentx){
						return true;
					}
					else{
						throw new InvalidCoordinatesException("Invalid move!");
					}
				}
			}
			//Black Player
			else{
				//Capture - move diagonally
				if ((currentx==newx-1 || currentx==newx+1) && currenty==newy-1 && capturedPiece.getColor()==Color.WHITE){
					return true;
				}
				//Move straight
				if (currenty==6){
					if ((newy-currenty==-1 || newy-currenty==-2) && newx==currentx && (board.getPieceAt(new Coordinate(currentx, currenty-1)))==null){
						return true;
					}
					else{
						throw new InvalidCoordinatesException("Invalid move!");
					}
				}
				else{
					if (newy-currenty==-1 && newx==currentx){
						return true;
					}
					else{
						throw new InvalidCoordinatesException("Invalid move!");
					}
				}
				
			}
		case ROOK:
			if (currentx == newx) {
				if (currenty < newy) {
					for (int i = currenty + 1; i < newy; i++) {
						if (board.getPieceAt(new Coordinate(currentx, i)) != null) {
							throw new InvalidCoordinatesException();
						}
					}
				} else if (currenty > newy) {
					for (int i = newy + 1; i < currenty; i++) {
						if (board.getPieceAt(new Coordinate(currentx, i)) != null) {
							throw new InvalidCoordinatesException();
						}
					}
				}
			}
			if (currenty == newy) {
				if (currentx < newx) {
					for (int i = currentx + 1; i < newx; i++) {
						if (board.getPieceAt(new Coordinate(currenty, i)) != null) {
							throw new InvalidCoordinatesException();
						}
					}
				} else if (currentx > newx) {
					for (int i = newx + 1; i < currentx; i++) {
						if (board.getPieceAt(new Coordinate(currenty, i)) != null) {
							throw new InvalidCoordinatesException();
						}
					}
				}
			} else {
				throw new InvalidCoordinatesException("Invalid move for ROOK!");
			}
			break;
		case KNIGHT:
			if(Math.abs(newy-currenty)==2 && Math.abs(newx-currentx)==1){
				return true;
			}
			if(Math.abs(newy-currenty)==1 && Math.abs(newx-currentx)==2){
				return true;
			}
			else{
				throw new InvalidCoordinatesException("Invalid move for KNIGHT!")
			}
			
			break;
		case BISHOP:
			break;
		case QUEEN:
			break;
		case KING:
			break;
		}
		return true;
	}
}