package com.capgemini.chess.algorithms.implementation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.capgemini.chess.algorithms.data.Coordinate;
import com.capgemini.chess.algorithms.data.Move;
import com.capgemini.chess.algorithms.data.enums.BoardState;
import com.capgemini.chess.algorithms.data.enums.Color;
import com.capgemini.chess.algorithms.data.enums.MoveType;
import com.capgemini.chess.algorithms.data.enums.Piece;
import com.capgemini.chess.algorithms.data.enums.PieceType;
import com.capgemini.chess.algorithms.data.generated.Board;
import com.capgemini.chess.algorithms.implementation.exceptions.InvalidMoveException;
import com.capgemini.chess.algorithms.implementation.exceptions.KingInCheckException;

/**
 * Class for managing of basic operations on the Chess Board.
 *
 * @author Michal Bejm
 *
 */
public class BoardManager {

	private Board board = new Board();

	public BoardManager() {
		initBoard();
	}

	public BoardManager(List<Move> moves) {
		initBoard();
		for (Move move : moves) {
			addMove(move);
		}
	}

	public BoardManager(Board board) {
		this.board = board;
	}

	/**
	 * Getter for generated board
	 *
	 * @return board
	 */
	public Board getBoard() {
		return this.board;
	}

	/**
	 * Performs move of the chess piece on the chess board from one field to
	 * another.
	 *
	 * @param from
	 *            coordinates of 'from' field
	 * @param to
	 *            coordinates of 'to' field
	 * @return move object which includes moved piece and move type
	 * @throws InvalidMoveException
	 *             in case move is not valid
	 * @throws InvalidMoveException
	 */
	public Move performMove(Coordinate from, Coordinate to) throws InvalidMoveException, InvalidMoveException {
		Move move = validateMove(from, to);
		addMove(move);

		return move;
	}

	/**
	 * Calculates state of the chess board.
	 *
	 * @return state of the chess board
	 * @throws InvalidMoveException
	 */
	public BoardState updateBoardState() throws InvalidMoveException {

		Color nextMoveColor = calculateNextMoveColor();

		boolean isKingInCheck = isKingInCheck(nextMoveColor);
		boolean isAnyMoveValid = isAnyMoveValid(nextMoveColor);
		BoardState boardState;
		if (isKingInCheck) {
			if (isAnyMoveValid) {
				boardState = BoardState.CHECK;
			} else {
				boardState = BoardState.CHECK_MATE;
			}
		} else {
			if (isAnyMoveValid) {
				boardState = BoardState.REGULAR;
			} else {
				boardState = BoardState.STALE_MATE;
			}
		}
		this.board.setState(boardState);
		return boardState;
	}

	/**
	 * Checks threefold repetition rule (one of the conditions to end the chess
	 * game with a draw).
	 *
	 * @return true if current state repeated at list two times, false otherwise
	 */
	public boolean checkThreefoldRepetitionRule() {

		// there is no need to check moves that where before last capture/en
		// passant/castling
		int lastNonAttackMoveIndex = findLastNonAttackMoveIndex();
		List<Move> omittedMoves = this.board.getMoveHistory().subList(0, lastNonAttackMoveIndex);
		BoardManager simulatedBoardManager = new BoardManager(omittedMoves);

		int counter = 0;
		for (int i = lastNonAttackMoveIndex; i < this.board.getMoveHistory().size(); i++) {
			Move moveToAdd = this.board.getMoveHistory().get(i);
			simulatedBoardManager.addMove(moveToAdd);
			boolean areBoardsEqual = Arrays.deepEquals(this.board.getPieces(),
					simulatedBoardManager.getBoard().getPieces());
			if (areBoardsEqual) {
				counter++;
			}
		}

		return counter >= 2;
	}

	/**
	 * Checks 50-move rule (one of the conditions to end the chess game with a
	 * draw).
	 *
	 * @return true if no pawn was moved or not capture was performed during
	 *         last 50 moves, false otherwise
	 */
	public boolean checkFiftyMoveRule() {

		// for this purpose a "move" consists of a player completing his turn
		// followed by his opponent completing his turn
		if (this.board.getMoveHistory().size() < 100) {
			return false;
		}

		for (int i = this.board.getMoveHistory().size() - 1; i >= this.board.getMoveHistory().size() - 100; i--) {
			Move currentMove = this.board.getMoveHistory().get(i);
			PieceType currentPieceType = currentMove.getMovedPiece().getType();
			if (currentMove.getType() != MoveType.ATTACK || currentPieceType == PieceType.PAWN) {
				return false;
			}
		}

		return true;
	}

	// PRIVATE

	private void initBoard() {

		this.board.setPieceAt(Piece.BLACK_ROOK, new Coordinate(0, 7));
		this.board.setPieceAt(Piece.BLACK_KNIGHT, new Coordinate(1, 7));
		this.board.setPieceAt(Piece.BLACK_BISHOP, new Coordinate(2, 7));
		this.board.setPieceAt(Piece.BLACK_QUEEN, new Coordinate(3, 7));
		this.board.setPieceAt(Piece.BLACK_KING, new Coordinate(4, 7));
		this.board.setPieceAt(Piece.BLACK_BISHOP, new Coordinate(5, 7));
		this.board.setPieceAt(Piece.BLACK_KNIGHT, new Coordinate(6, 7));
		this.board.setPieceAt(Piece.BLACK_ROOK, new Coordinate(7, 7));

		for (int x = 0; x < Board.SIZE; x++) {
			this.board.setPieceAt(Piece.BLACK_PAWN, new Coordinate(x, 6));
		}

		this.board.setPieceAt(Piece.WHITE_ROOK, new Coordinate(0, 0));
		this.board.setPieceAt(Piece.WHITE_KNIGHT, new Coordinate(1, 0));
		this.board.setPieceAt(Piece.WHITE_BISHOP, new Coordinate(2, 0));
		this.board.setPieceAt(Piece.WHITE_QUEEN, new Coordinate(3, 0));
		this.board.setPieceAt(Piece.WHITE_KING, new Coordinate(4, 0));
		this.board.setPieceAt(Piece.WHITE_BISHOP, new Coordinate(5, 0));
		this.board.setPieceAt(Piece.WHITE_KNIGHT, new Coordinate(6, 0));
		this.board.setPieceAt(Piece.WHITE_ROOK, new Coordinate(7, 0));

		for (int x = 0; x < Board.SIZE; x++) {
			this.board.setPieceAt(Piece.WHITE_PAWN, new Coordinate(x, 1));
		}
	}

	private void addMove(Move move) {

		addRegularMove(move);

		if (move.getType() == MoveType.CASTLING) {
			addCastling(move);
		} else if (move.getType() == MoveType.EN_PASSANT) {
			addEnPassant(move);
		}

		this.board.getMoveHistory().add(move);
	}

	private void addRegularMove(Move move) {
		Piece movedPiece = this.board.getPieceAt(move.getFrom());
		this.board.setPieceAt(null, move.getFrom());
		this.board.setPieceAt(movedPiece, move.getTo());

		performPromotion(move, movedPiece);
	}

	private void performPromotion(Move move, Piece movedPiece) {
		if (movedPiece == Piece.WHITE_PAWN && move.getTo().getY() == (Board.SIZE - 1)) {
			this.board.setPieceAt(Piece.WHITE_QUEEN, move.getTo());
		}
		if (movedPiece == Piece.BLACK_PAWN && move.getTo().getY() == 0) {
			this.board.setPieceAt(Piece.BLACK_QUEEN, move.getTo());
		}
	}

	private void addCastling(Move move) {
		if (move.getFrom().getX() > move.getTo().getX()) {
			Piece rook = this.board.getPieceAt(new Coordinate(0, move.getFrom().getY()));
			this.board.setPieceAt(null, new Coordinate(0, move.getFrom().getY()));
			this.board.setPieceAt(rook, new Coordinate(move.getTo().getX() + 1, move.getTo().getY()));
		} else {
			Piece rook = this.board.getPieceAt(new Coordinate(Board.SIZE - 1, move.getFrom().getY()));
			this.board.setPieceAt(null, new Coordinate(Board.SIZE - 1, move.getFrom().getY()));
			this.board.setPieceAt(rook, new Coordinate(move.getTo().getX() - 1, move.getTo().getY()));
		}
	}

	private void addEnPassant(Move move) {
		Move lastMove = this.board.getMoveHistory().get(this.board.getMoveHistory().size() - 1);
		this.board.setPieceAt(null, lastMove.getTo());
	}

	private Move validateMove(Coordinate from, Coordinate to)
			throws InvalidMoveException, KingInCheckException, InvalidMoveException {
		// TODO please add implementation here
		Move currentMove = new Move();
		PossibleMoveManager possibleMove = new PossibleMoveManager();

		if (!(checkGivenCoordinates(from, to))) {
			throw new InvalidMoveException("Invalid coordinates");
		}

		currentMove.setFrom(from);
		currentMove.setMovedPiece(this.board.getPieceAt(from));
		currentMove.setTo(to);
		currentMove.setType(checkMoveType(from, to));

		possibleMove.checkMovePossibility(from, to, this.board);
		if (possibleMove.checkMovePossibility(from, to, this.board) == false) {
			throw new InvalidMoveException();
		}
		
		EnPassantValidator.validateEnPassant(from, to, this.board);

		// Check if checked
		this.board.setPieceAt(this.board.getPieceAt(from), to);
		this.board.setPieceAt(null, currentMove.getFrom());

		if (isKingInCheck(Color.WHITE)) {
			throw new KingInCheckException();
		}
		if (isKingInCheck(Color.BLACK)) {
			throw new KingInCheckException();
		}

		this.board.setPieceAt(this.board.getPieceAt(to), from);
		this.board.setPieceAt(null, currentMove.getTo());
		
		

		
		return currentMove;

	}

	private boolean isKingInCheck(Color kingColor) throws InvalidMoveException {
		// TODO please add implementation here
		// Koordynaty krola
		Piece checkedKing;
		Coordinate kingCoordinate = null;
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				Piece myKing = this.board.getPieceAt(new Coordinate(i, j));
				if (myKing != null) {
					if (myKing.getType() == PieceType.KING && myKing.getColor() == kingColor) {
						checkedKing = myKing;
						kingCoordinate = new Coordinate(i, j);
					}
				}
			}
		}
		// Koordynaty kazdego mozliwego ataku
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				Piece temporaryPiece = this.board.getPieceAt(new Coordinate(i, j));

				if (temporaryPiece != null && temporaryPiece.getColor() == kingColor) {
				}

				if (temporaryPiece != null && temporaryPiece.getColor() != kingColor) {
					PossibleMoveManager possibleMove = new PossibleMoveManager();
					Coordinate attackerCoordinate = new Coordinate(i, j);

					if (kingCoordinate == null) {
						return false;
					}

					if (possibleMove.checkMovePossibility(attackerCoordinate, kingCoordinate, this.board)) {
						return true;
					} else {
						return false;
					}
				}
			}

		}
		return false;
	}

	private boolean isAnyMoveValid(Color nextMoveColor) throws InvalidMoveException {
		// TODO please add implementation here

		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {

				Coordinate firstCoordinate = new Coordinate(i, j);

				if (this.board.getPieceAt(firstCoordinate) != null
						&& this.board.getPieceAt(firstCoordinate).getColor() == nextMoveColor) {
					for (int n = 0; n < 8; n++) {
						for (int m = 0; m < 8; m++) {
							Coordinate secondCoordinate = new Coordinate(n, m);
							if (checkGivenCoordinates(firstCoordinate, secondCoordinate)) {

								if (PossibleMoveManager.checkMovePossibility(firstCoordinate, secondCoordinate,
										this.board)) {

									Move currentMove = new Move();

									currentMove.setFrom(firstCoordinate);
									currentMove.setMovedPiece(this.board.getPieceAt(firstCoordinate));
									currentMove.setTo(secondCoordinate);
									currentMove.setType(checkMoveType(firstCoordinate, secondCoordinate));

									this.board.setPieceAt(this.board.getPieceAt(firstCoordinate), secondCoordinate);
									this.board.setPieceAt(null, currentMove.getFrom());

									if (isKingInCheck(Color.WHITE)) {
										return false;
									}
									if (isKingInCheck(Color.BLACK)) {
										return false;
									}

									this.board.setPieceAt(this.board.getPieceAt(secondCoordinate), firstCoordinate);
									this.board.setPieceAt(null, currentMove.getTo());

									return true;
								}
								;
							}
						}
					}
				}
			}
		}

		return false;
	}

	private boolean checkGivenCoordinates(Coordinate from, Coordinate to) throws InvalidMoveException {
		if (from.equals(to)) {
			return false;
		}
		// out of board - start coordinate
		if (from.getX() < 0 || from.getX() > 7 || from.getY() < 0 || from.getY() > 7) {
			return false;
		}
		// out of board - end coordinate
		if (to.getX() < 0 || to.getX() > 7 || to.getY() < 0 || to.getY() > 7) {
			return false;
		}
		// from is empty
		if (this.board.getPieceAt(from) == null) {
			return false;
		}
		// piece belongs to player at end coordinates
		if (this.board.getPieceAt(to) != null) {
			if (this.board.getPieceAt(to).getColor() == this.board.getPieceAt(from).getColor()) {
				return false;
			}
		}
		// piece does not belongs to a player at start coordinates
		if (this.board.getPieceAt(from).getColor() != calculateNextMoveColor()) {
			return false;
		}

		return true;
	}

	private MoveType checkMoveType(Coordinate from, Coordinate to) {
		if (this.board.getPieceAt(to) == null) {
			return MoveType.ATTACK;
		}
		if (this.board.getPieceAt(to) != null) {
			return MoveType.CAPTURE;
		}
		return null;

	}

	private Color calculateNextMoveColor() {
		if (this.board.getMoveHistory().size() % 2 == 0) {
			return Color.WHITE;
		} else {
			return Color.BLACK;
		}
	}

	private int findLastNonAttackMoveIndex() {
		int counter = 0;
		int lastNonAttackMoveIndex = 0;

		for (Move move : this.board.getMoveHistory()) {
			if (move.getType() != MoveType.ATTACK) {
				lastNonAttackMoveIndex = counter;
			}
			counter++;
		}

		return lastNonAttackMoveIndex;
	}

}
